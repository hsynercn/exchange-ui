[{"D:\\workspace\\exchange-ui\\src\\index.js":"1","D:\\workspace\\exchange-ui\\src\\App.js":"2","D:\\workspace\\exchange-ui\\src\\reportWebVitals.js":"3","D:\\workspace\\exchange-ui\\src\\CurrencyElement.js":"4","D:\\workspace\\exchange-ui\\src\\CurrencyColors.js":"5","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyMultipleSearchSelection.js":"6","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencySearchSelection.js":"7","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyManager.js":"8","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyGridDisplay.js":"9","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonGroup.js":"10","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonUtil.js":"11","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\HexagonGridUtils.js":"12","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\NumberFormattingUtil.js":"13","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\ColorUtil.js":"14","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\RegularConvexPolygon.js":"15"},{"size":847,"mtime":1613423093644,"results":"16","hashOfConfig":"17"},{"size":815,"mtime":1606335366352,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":831,"mtime":1608616994339,"results":"20","hashOfConfig":"17"},{"size":11025,"mtime":1613421432834,"results":"21","hashOfConfig":"17"},{"size":1051,"mtime":1613423346715,"results":"22","hashOfConfig":"17"},{"size":657,"mtime":1613423316833,"results":"23","hashOfConfig":"17"},{"size":5929,"mtime":1613415521030,"results":"24","hashOfConfig":"17"},{"size":7000,"mtime":1613421223206,"results":"25","hashOfConfig":"17"},{"size":3006,"mtime":1612989018490,"results":"26","hashOfConfig":"17"},{"size":2735,"mtime":1612986665275,"results":"27","hashOfConfig":"17"},{"size":3211,"mtime":1613289550874,"results":"28","hashOfConfig":"17"},{"size":893,"mtime":1613073106422,"results":"29","hashOfConfig":"17"},{"size":572,"mtime":1612640494149,"results":"30","hashOfConfig":"17"},{"size":5730,"mtime":1613505954328,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"jvmnhy",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\workspace\\exchange-ui\\src\\index.js",["69","70"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './obsolete/demo.css'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport CurrencyMultipleSearchSelection from \"./hexagon_currency_app/CurrencyMultipleSearchSelection\";\r\nimport CurrencySearchSelection from \"./hexagon_currency_app/CurrencySearchSelection\";\r\nimport CurrencyManager from \"./hexagon_currency_app/CurrencyManager\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <CurrencyManager/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["71","72"],"D:\\workspace\\exchange-ui\\src\\App.js",["73"],"import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from \"react\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <Hello/>\n                <p>Hello React!</p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nfunction Hello() {\n    return <div>Hello func!</div>\n}\n\nexport default App;\n",["74","75"],"D:\\workspace\\exchange-ui\\src\\reportWebVitals.js",[],"D:\\workspace\\exchange-ui\\src\\CurrencyElement.js",[],"D:\\workspace\\exchange-ui\\src\\CurrencyColors.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyMultipleSearchSelection.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencySearchSelection.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyManager.js",["76","77","78"],"import CurrencyGridDisplay from \"./CurrencyGridDisplay\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport CurrencySearchSelection from \"./CurrencySearchSelection\";\r\nimport CurrencyMultipleSearchSelection from \"./CurrencyMultipleSearchSelection\";\r\nimport {Dropdown} from \"semantic-ui-react\";\r\n\r\nconst useCurrencyManager = (props) => {\r\n    const [currencyDisplayType, setCurrencyDisplayType] = useState(\"radial\");\r\n\r\n    const [currencyDisplaySource, setCurrencyDisplaySource] = useState(\"USD\");\r\n    const [currencyDisplayDestinations, setCurrencyDisplayDestinations] = useState([\"TRY\", \"EUR\", \"GBP\", \"CAD\", \"ETH\", \"BTC\"]);\r\n    const [currencyVisualizationData, setCurrencyVisualizationData] = useState({\r\n        type: currencyDisplayType,\r\n        sourceCurrency: {entity: currencyDisplaySource},\r\n        destinationCurrencies: []\r\n    });\r\n\r\n    const [selectableCurrencyPool, setSelectableCurrencyPool] = useState([]);\r\n\r\n    function formatEmptyCurrenySlots(targetDestinationCurrencies, currencyVisualizationData) {\r\n        let i = 0;\r\n        for (i = targetDestinationCurrencies.length; i < 6; i++) {\r\n            currencyVisualizationData.destinationCurrencies.push({\r\n                entity: \"---\",\r\n                value: 0.0\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchCurrencyData() {\r\n            axios.get(`http://localhost:8080/currency`).then(response => {\r\n\r\n                let responseBaseCurrency = response.data.base;\r\n                let responseRateMap = {};\r\n                let responseCurrencyPool = [];\r\n                response.data.rates.forEach(rate => {\r\n                    responseRateMap[rate.entity] = rate;\r\n                    responseCurrencyPool.push({key: rate.entity, text: rate.entity, value: rate.entity});\r\n                });\r\n\r\n                setSelectableCurrencyPool(responseCurrencyPool)\r\n\r\n                let targetSourceCurrency = currencyDisplaySource;\r\n                let targetDestinationCurrencies = currencyDisplayDestinations;\r\n\r\n                let currencyVisualizationData = {type: \"\", sourceCurrency: {entity: \"\"}, destinationCurrencies: []};\r\n                currencyVisualizationData.type = currencyDisplayType;\r\n                if (targetSourceCurrency === responseBaseCurrency) {\r\n                    currencyVisualizationData.sourceCurrency.entity = targetSourceCurrency;\r\n\r\n                    targetDestinationCurrencies.forEach((value, index, array) => {\r\n                        currencyVisualizationData.destinationCurrencies.push({\r\n                            entity: responseRateMap[value].entity,\r\n                            value: responseRateMap[value].value\r\n                        });\r\n                    });\r\n\r\n                    formatEmptyCurrenySlots(targetDestinationCurrencies, currencyVisualizationData);\r\n\r\n                } else if (targetSourceCurrency in responseRateMap) {\r\n                    currencyVisualizationData.sourceCurrency.entity = targetSourceCurrency;\r\n\r\n                    let convertedRateMap = {};\r\n                    let divider = responseRateMap[targetSourceCurrency].value;\r\n                    response.data.rates.forEach(rate => {\r\n                        convertedRateMap[rate.entity] = rate;\r\n                        convertedRateMap[rate.entity].value = convertedRateMap[rate.entity].value / divider;\r\n                    });\r\n                    currencyVisualizationData.sourceCurrency.entity = targetSourceCurrency;\r\n\r\n                    targetDestinationCurrencies.forEach((value, index, array) => {\r\n                        currencyVisualizationData.destinationCurrencies.push({\r\n                            entity: convertedRateMap[value].entity,\r\n                            value: convertedRateMap[value].value\r\n                        });\r\n                    });\r\n\r\n                    formatEmptyCurrenySlots(targetDestinationCurrencies, currencyVisualizationData);\r\n\r\n\r\n                }\r\n                setCurrencyVisualizationData(currencyVisualizationData);\r\n            });\r\n        }\r\n\r\n        fetchCurrencyData();\r\n    }, [props, currencyDisplaySource, currencyDisplayDestinations]);\r\n    return {\r\n        currencyVisualizationData,\r\n        selectableCurrencyPool,\r\n        currencyDisplaySource,\r\n        setCurrencyDisplaySource,\r\n        currencyDisplayDestinations,\r\n        setCurrencyDisplayDestinations\r\n    };\r\n}\r\n\r\nconst CurrencyManager = (props) => {\r\n    const {\r\n        currencyVisualizationData,\r\n        selectableCurrencyPool,\r\n        currencyDisplaySource,\r\n        setCurrencyDisplaySource,\r\n        currencyDisplayDestinations,\r\n        setCurrencyDisplayDestinations\r\n    } = useCurrencyManager(props);\r\n    return (\r\n        <>\r\n            <CurrencyGridDisplay\r\n                currencyVisualizationData={currencyVisualizationData}\r\n                polygonCountLength={13}\r\n                polygonCountHeight={13}\r\n                defaultUnitPolygon={{\r\n                    edgeOffsetRatio: 0.036,\r\n                    startAngle: 90,\r\n                    numSides: 6,\r\n                    fillColor: '#ffffff',\r\n                    strokeColor: '#777777',\r\n                    text: \"\",\r\n                    textFontSize: 14,\r\n                    innerPolygonRatio: 0.0,\r\n                    innerFillColor: \"\",\r\n                }}\r\n            />\r\n            <CurrencySearchSelection setValue={setCurrencyDisplaySource}\r\n                                     options={selectableCurrencyPool}\r\n                                     value={currencyDisplaySource}/>\r\n            <CurrencyMultipleSearchSelection setValue={setCurrencyDisplayDestinations}\r\n                                             options={selectableCurrencyPool}\r\n                                             value={currencyDisplayDestinations}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CurrencyManager;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyGridDisplay.js",["79","80","81","82","83","84","85","86","87","88"],"import PolygonGroup from \"./PolygonGroup\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {ClockwiseHexagonDirections, Directions, getOrientations} from \"./PolygonUtil\";\r\nimport {getCurrencyColor} from \"../CurrencyColors\";\r\nimport {centeredHexagonPolygonGrid, getRadialExpansionSequence} from \"./HexagonGridUtils\";\r\nimport {getDiagonalStepValue, largeNumberFormatter} from \"./NumberFormattingUtil\";\r\nimport {LightenDarkenColor} from \"./ColorUtil\";\r\n\r\nconst useCurrencyGridDisplay = (props) => {\r\n    const [polygonCountLength, setPolygonCountLength] = useState(props.polygonCountLength);\r\n    const [polygonCountHeight, setPolygonCountHeight] = useState(props.polygonCountHeight);\r\n    const [defaultUnitPolygon, setDefaultUnitPolygon] = useState(props.defaultUnitPolygon);\r\n\r\n    let {tempAxialArray, tempAxialMap} = centeredHexagonPolygonGrid(polygonCountLength, polygonCountHeight, defaultUnitPolygon);\r\n\r\n    const [axialArray, setAxialArray] = useState(tempAxialArray);\r\n    const [axialMap, setAxialMap] = useState(tempAxialMap);\r\n\r\n    const [customizedPolygons, setCustomizedPolygons] = useState([]);\r\n    const [orientationX, setOrientationX] = useState(0);\r\n    const [orientationY, setOrientationY] = useState(0);\r\n    const [floatNumFault, setFloatNumFault] = useState(2);\r\n\r\n    function prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap) {\r\n        let centralTextBlockColor = getCurrencyColor(sourceCurrencyEntity);\r\n        let centerPolygonCoordinate = startPoints[Directions.CENTER].x + \",\" + startPoints[Directions.CENTER].y;\r\n        clonedAxialMap[centerPolygonCoordinate].fillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].strokeColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].innerFillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].text = sourceCurrencyEntity;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let currencyVisualizationData = props.currencyVisualizationData;\r\n\r\n        let type = currencyVisualizationData.type;\r\n        let sourceCurrencyEntity = currencyVisualizationData.sourceCurrency.entity;\r\n        let destinationCurrencies = currencyVisualizationData.destinationCurrencies;\r\n\r\n        if (sourceCurrencyEntity === \"\") {\r\n            return;\r\n        }\r\n        let clonedAxialMap = {...axialMap};\r\n\r\n        let startPoints = getOrientations(orientationX, orientationY);\r\n\r\n        prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap);\r\n\r\n\r\n        if (type === \"radial\") {\r\n            destinationCurrencies.forEach((currency, index) => {\r\n                let direction = ClockwiseHexagonDirections[index];\r\n                let polygonCoordinateSequence = getRadialExpansionSequence(startPoints[direction].x, startPoints[direction].y, direction);\r\n                let displayValue = currency.value;\r\n                let stepValue = getDiagonalStepValue(displayValue, floatNumFault);\r\n\r\n                let currencyText = currency.entity;\r\n                let fillColor = '#ffffff';\r\n                let strokeColor = LightenDarkenColor(getCurrencyColor(currency.entity), -20);\r\n                let innerFillColor = getCurrencyColor(currency.entity);\r\n                let textBlockColor = LightenDarkenColor(innerFillColor, 30);\r\n\r\n                let sum = 0;\r\n                polygonCoordinateSequence.forEach((polygonCoordinate, index) => {\r\n                    if (index === 0) {\r\n                        clonedAxialMap[polygonCoordinate].textFontSize = 20;\r\n                        clonedAxialMap[polygonCoordinate].text = currencyText;\r\n                        clonedAxialMap[polygonCoordinate].fillColor = textBlockColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = textBlockColor;\r\n                    } else if (displayValue !== 0) {\r\n                        if (displayValue < stepValue) {\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum + displayValue);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = fillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            let innerPolygonRatio = displayValue / stepValue;\r\n                            clonedAxialMap[polygonCoordinate].innerPolygonRatio = innerPolygonRatio;\r\n                            displayValue = 0;\r\n                        } else {\r\n                            sum += stepValue;\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = innerFillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            displayValue -= stepValue;\r\n                        }\r\n                    } else {\r\n                        clonedAxialMap[polygonCoordinate].text = \"\";\r\n                        clonedAxialMap[polygonCoordinate].fillColor = defaultUnitPolygon.fillColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = defaultUnitPolygon.strokeColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = defaultUnitPolygon.innerFillColor;\r\n                        clonedAxialMap[polygonCoordinate].innerPolygonRatio = defaultUnitPolygon.innerPolygonRatio;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        setAxialMap(clonedAxialMap);\r\n\r\n    }, [props]);\r\n    return {polygonCountLength, polygonCountHeight, defaultUnitPolygon, customizedPolygons, axialArray, axialMap};\r\n}\r\n\r\nconst CurrencyGridDisplay = (props) => {\r\n    const {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        defaultUnitPolygon,\r\n        customizedPolygons,\r\n        axialArray,\r\n        axialMap,\r\n    } = useCurrencyGridDisplay(props);\r\n\r\n\r\n    return (\r\n        <>\r\n            <PolygonGroup\r\n                polygonCountLength={polygonCountLength}\r\n                polygonCountHeight={polygonCountHeight}\r\n                customizedPolygons={customizedPolygons}\r\n                axialArray={axialArray}\r\n                axialMap={axialMap}\r\n                defaultUnitPolygon={{\r\n                    edgeOffsetRatio: 0.036,\r\n                    startAngle: 90,\r\n                    numSides: 6,\r\n                    fillColor: '#ffffff',\r\n                    strokeColor: '#000000',\r\n                    text: \"\",\r\n                    textFontSize: 14,\r\n                    innerPolygonRatio: 0.0,\r\n                    innerFillColor: \"\",\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n\r\n}\r\nexport default CurrencyGridDisplay;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonGroup.js",["89","90","91","92","93","94"],"import RegularConvexPolygon from \"./RegularConvexPolygon\";\r\nimport React, {useState} from \"react\";\r\n\r\nconst usePolygonGroup = (props) => {\r\n\r\n    let length = props.polygonCountLength;\r\n    let height = props.polygonCountHeight;\r\n    length = length % 2 === 1 ? length : length + 1;\r\n    height = height % 2 === 1 ? height : height + 1;\r\n\r\n    const [polygonCountLength, setPolygonCountLength] = useState(length);\r\n    const [polygonCountHeight, setPolygonCountHeight] = useState(height);\r\n\r\n    const [axialArray, setAxialArray] = useState(props.axialArray);\r\n    const [axialMap, setAxialMap] = useState(props.axialMap);\r\n\r\n    const[widthRatio, setWidthRatio] = useState(1 / polygonCountLength);\r\n\r\n    return {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        axialArray,\r\n        axialMap,\r\n        widthRatio\r\n    };\r\n}\r\n\r\nconst PolygonGroup = (props) => {\r\n    const {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        axialArray,\r\n        axialMap,\r\n        widthRatio,\r\n    } = usePolygonGroup(props);\r\n\r\n    const horizontalMargin = (1 / ((polygonCountLength * 2) + 1)) * 100;\r\n    const verticalMargin = horizontalMargin / Math.sqrt(3)\r\n\r\n    return (\r\n        <div style={{\r\n            width: \"80%\",\r\n            overflowX: \"auto\",\r\n            overflowY: \"auto\",\r\n            margin: \"0 auto\"\r\n        }}>\r\n            {\r\n                axialArray.map((row, index) => {\r\n\r\n                        let dynamicStyle = {};\r\n                        if (axialArray.length === index + 1) {\r\n                            dynamicStyle = {\r\n                                marginRight: horizontalMargin + \"%\",\r\n                            };\r\n                        } else if (index % 2 === 0) {\r\n                            if (index === 0) {\r\n                                dynamicStyle = {\r\n                                    marginRight: horizontalMargin + \"%\",\r\n                                    marginBottom: \"-\" + verticalMargin + \"%\",\r\n                                };\r\n                            } else {\r\n                                dynamicStyle = {\r\n                                    marginRight: horizontalMargin + \"%\",\r\n                                    marginBottom: \"-\" + verticalMargin + \"%\",\r\n                                };\r\n                            }\r\n                        } else {\r\n\r\n                            dynamicStyle = {\r\n                                marginLeft: horizontalMargin + \"%\",\r\n                                marginBottom: \"-\" + verticalMargin + \"%\",\r\n                            };\r\n\r\n                        }\r\n                        return <div\r\n                            style={dynamicStyle}>{\r\n                            row.map((element) => <RegularConvexPolygon widthRatio={widthRatio} {...axialMap[element]}\r\n                            />)\r\n                        }</div>\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default PolygonGroup;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\HexagonGridUtils.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\NumberFormattingUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\ColorUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\RegularConvexPolygon.js",["95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117"],{"ruleId":"118","severity":1,"message":"119","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":39},{"ruleId":"118","severity":1,"message":"122","line":8,"column":8,"nodeType":"120","messageId":"121","endLine":8,"endColumn":31},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"118","severity":1,"message":"127","line":3,"column":16,"nodeType":"120","messageId":"121","endLine":3,"endColumn":24},{"ruleId":"123","replacedBy":"128"},{"ruleId":"125","replacedBy":"129"},{"ruleId":"118","severity":1,"message":"130","line":6,"column":9,"nodeType":"120","messageId":"121","endLine":6,"endColumn":17},{"ruleId":"118","severity":1,"message":"131","line":9,"column":33,"nodeType":"120","messageId":"121","endLine":9,"endColumn":55},{"ruleId":"132","severity":1,"message":"133","line":89,"column":8,"nodeType":"134","endLine":89,"endColumn":67,"suggestions":"135"},{"ruleId":"118","severity":1,"message":"136","line":10,"column":32,"nodeType":"120","messageId":"121","endLine":10,"endColumn":53},{"ruleId":"118","severity":1,"message":"137","line":11,"column":32,"nodeType":"120","messageId":"121","endLine":11,"endColumn":53},{"ruleId":"118","severity":1,"message":"138","line":12,"column":32,"nodeType":"120","messageId":"121","endLine":12,"endColumn":53},{"ruleId":"118","severity":1,"message":"139","line":16,"column":24,"nodeType":"120","messageId":"121","endLine":16,"endColumn":37},{"ruleId":"118","severity":1,"message":"140","line":19,"column":32,"nodeType":"120","messageId":"121","endLine":19,"endColumn":53},{"ruleId":"118","severity":1,"message":"141","line":20,"column":26,"nodeType":"120","messageId":"121","endLine":20,"endColumn":41},{"ruleId":"118","severity":1,"message":"142","line":21,"column":26,"nodeType":"120","messageId":"121","endLine":21,"endColumn":41},{"ruleId":"118","severity":1,"message":"143","line":22,"column":27,"nodeType":"120","messageId":"121","endLine":22,"endColumn":43},{"ruleId":"132","severity":1,"message":"144","line":101,"column":8,"nodeType":"134","endLine":101,"endColumn":15,"suggestions":"145"},{"ruleId":"118","severity":1,"message":"146","line":109,"column":9,"nodeType":"120","messageId":"121","endLine":109,"endColumn":27},{"ruleId":"118","severity":1,"message":"136","line":11,"column":32,"nodeType":"120","messageId":"121","endLine":11,"endColumn":53},{"ruleId":"118","severity":1,"message":"137","line":12,"column":32,"nodeType":"120","messageId":"121","endLine":12,"endColumn":53},{"ruleId":"118","severity":1,"message":"139","line":14,"column":24,"nodeType":"120","messageId":"121","endLine":14,"endColumn":37},{"ruleId":"118","severity":1,"message":"147","line":15,"column":22,"nodeType":"120","messageId":"121","endLine":15,"endColumn":33},{"ruleId":"118","severity":1,"message":"148","line":17,"column":23,"nodeType":"120","messageId":"121","endLine":17,"endColumn":36},{"ruleId":"118","severity":1,"message":"149","line":31,"column":9,"nodeType":"120","messageId":"121","endLine":31,"endColumn":27},{"ruleId":"118","severity":1,"message":"148","line":6,"column":24,"nodeType":"120","messageId":"121","endLine":6,"endColumn":37},{"ruleId":"118","severity":1,"message":"150","line":7,"column":20,"nodeType":"120","messageId":"121","endLine":7,"endColumn":29},{"ruleId":"118","severity":1,"message":"151","line":8,"column":29,"nodeType":"120","messageId":"121","endLine":8,"endColumn":47},{"ruleId":"118","severity":1,"message":"152","line":9,"column":24,"nodeType":"120","messageId":"121","endLine":9,"endColumn":37},{"ruleId":"118","severity":1,"message":"153","line":10,"column":22,"nodeType":"120","messageId":"121","endLine":10,"endColumn":33},{"ruleId":"118","severity":1,"message":"154","line":18,"column":23,"nodeType":"120","messageId":"121","endLine":18,"endColumn":35},{"ruleId":"118","severity":1,"message":"155","line":19,"column":27,"nodeType":"120","messageId":"121","endLine":19,"endColumn":43},{"ruleId":"118","severity":1,"message":"156","line":40,"column":19,"nodeType":"120","messageId":"121","endLine":40,"endColumn":27},{"ruleId":"118","severity":1,"message":"157","line":43,"column":29,"nodeType":"120","messageId":"121","endLine":43,"endColumn":47},{"ruleId":"118","severity":1,"message":"158","line":46,"column":32,"nodeType":"120","messageId":"121","endLine":46,"endColumn":53},{"ruleId":"118","severity":1,"message":"159","line":49,"column":18,"nodeType":"120","messageId":"121","endLine":49,"endColumn":25},{"ruleId":"118","severity":1,"message":"160","line":50,"column":18,"nodeType":"120","messageId":"121","endLine":50,"endColumn":25},{"ruleId":"132","severity":1,"message":"161","line":67,"column":8,"nodeType":"134","endLine":67,"endColumn":15,"suggestions":"162"},{"ruleId":"118","severity":1,"message":"163","line":69,"column":11,"nodeType":"120","messageId":"121","endLine":69,"endColumn":30},{"ruleId":"118","severity":1,"message":"164","line":74,"column":11,"nodeType":"120","messageId":"121","endLine":74,"endColumn":19},{"ruleId":"118","severity":1,"message":"165","line":80,"column":11,"nodeType":"120","messageId":"121","endLine":80,"endColumn":39},{"ruleId":"118","severity":1,"message":"166","line":119,"column":9,"nodeType":"120","messageId":"121","endLine":119,"endColumn":19},{"ruleId":"118","severity":1,"message":"167","line":120,"column":9,"nodeType":"120","messageId":"121","endLine":120,"endColumn":17},{"ruleId":"118","severity":1,"message":"168","line":121,"column":9,"nodeType":"120","messageId":"121","endLine":121,"endColumn":18},{"ruleId":"118","severity":1,"message":"169","line":122,"column":9,"nodeType":"120","messageId":"121","endLine":122,"endColumn":24},{"ruleId":"118","severity":1,"message":"170","line":123,"column":9,"nodeType":"120","messageId":"121","endLine":123,"endColumn":22},{"ruleId":"118","severity":1,"message":"171","line":124,"column":9,"nodeType":"120","messageId":"121","endLine":124,"endColumn":14},{"ruleId":"118","severity":1,"message":"172","line":133,"column":9,"nodeType":"120","messageId":"121","endLine":133,"endColumn":26},"no-unused-vars","'CurrencyMultipleSearchSelection' is defined but never used.","Identifier","unusedVar","'CurrencySearchSelection' is defined but never used.","no-native-reassign",["173"],"no-negated-in-lhs",["174"],"'useState' is defined but never used.",["173"],["174"],"'Dropdown' is defined but never used.","'setCurrencyDisplayType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currencyDisplayType'. Either include it or remove the dependency array.","ArrayExpression",["175"],"'setPolygonCountLength' is assigned a value but never used.","'setPolygonCountHeight' is assigned a value but never used.","'setDefaultUnitPolygon' is assigned a value but never used.","'setAxialArray' is assigned a value but never used.","'setCustomizedPolygons' is assigned a value but never used.","'setOrientationX' is assigned a value but never used.","'setOrientationY' is assigned a value but never used.","'setFloatNumFault' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axialMap', 'defaultUnitPolygon.fillColor', 'defaultUnitPolygon.innerFillColor', 'defaultUnitPolygon.innerPolygonRatio', 'defaultUnitPolygon.strokeColor', 'floatNumFault', 'orientationX', and 'orientationY'. Either include them or remove the dependency array.",["176"],"'defaultUnitPolygon' is assigned a value but never used.","'setAxialMap' is assigned a value but never used.","'setWidthRatio' is assigned a value but never used.","'polygonCountHeight' is assigned a value but never used.","'setRadius' is assigned a value but never used.","'setEdgeOffsetRatio' is assigned a value but never used.","'setStartAngle' is assigned a value but never used.","'setNumSides' is assigned a value but never used.","'setCenterAng' is assigned a value but never used.","'setEdgeOffsetLen' is assigned a value but never used.","'setEdges' is assigned a value but never used.","'setGeneratedPoints' is assigned a value but never used.","'setPolygonCoordinates' is assigned a value but never used.","'setXDim' is assigned a value but never used.","'setYDim' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'centerAng', 'edgeOffsetLen', 'edges', 'numSides', 'radius', and 'startAngle'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPolygonCoordinatesInner' needs the current value of 'edges'.",["177"],"'setTextWithFontSize' is assigned a value but never used.","'setColor' is assigned a value but never used.","'setInnerPolygonFullnessRatio' is assigned a value but never used.","'startAngle' is assigned a value but never used.","'numSides' is assigned a value but never used.","'centerAng' is assigned a value but never used.","'generatedPoints' is assigned a value but never used.","'edgeOffsetLen' is assigned a value but never used.","'edges' is assigned a value but never used.","'innerPolygonRatio' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [props, currencyDisplaySource, currencyDisplayDestinations, currencyDisplayType]",{"range":"184","text":"185"},"Update the dependencies array to be: [axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, floatNumFault, orientationX, orientationY, props]",{"range":"186","text":"187"},"Update the dependencies array to be: [centerAng, edgeOffsetLen, edges, numSides, props, radius, startAngle]",{"range":"188","text":"189"},[4154,4213],"[props, currencyDisplaySource, currencyDisplayDestinations, currencyDisplayType]",[5815,5822],"[axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, floatNumFault, orientationX, orientationY, props]",[2982,2989],"[centerAng, edgeOffsetLen, edges, numSides, props, radius, startAngle]"]