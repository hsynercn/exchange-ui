[{"D:\\workspace\\exchange-ui\\src\\index.js":"1","D:\\workspace\\exchange-ui\\src\\App.js":"2","D:\\workspace\\exchange-ui\\src\\reportWebVitals.js":"3","D:\\workspace\\exchange-ui\\src\\CurrencyElement.js":"4","D:\\workspace\\exchange-ui\\src\\CurrencyColors.js":"5","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyMultipleSearchSelection.js":"6","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencySearchSelection.js":"7","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyManager.js":"8","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyGridDisplay.js":"9","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonGroup.js":"10","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonUtil.js":"11","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\HexagonGridUtils.js":"12","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\NumberFormattingUtil.js":"13","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\ColorUtil.js":"14","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\RegularConvexPolygon.js":"15","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonInnerText.js":"16","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyCenteredDisplay.js":"17"},{"size":847,"mtime":1613423093644,"results":"18","hashOfConfig":"19"},{"size":815,"mtime":1606335366352,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":831,"mtime":1608616994339,"results":"22","hashOfConfig":"19"},{"size":11025,"mtime":1613421432834,"results":"23","hashOfConfig":"19"},{"size":1037,"mtime":1617826275714,"results":"24","hashOfConfig":"19"},{"size":657,"mtime":1617826275754,"results":"25","hashOfConfig":"19"},{"size":7555,"mtime":1617827233806,"results":"26","hashOfConfig":"19"},{"size":7164,"mtime":1617653688478,"results":"27","hashOfConfig":"19"},{"size":5556,"mtime":1617826275681,"results":"28","hashOfConfig":"19"},{"size":3859,"mtime":1617654857663,"results":"29","hashOfConfig":"19"},{"size":4347,"mtime":1617484040657,"results":"30","hashOfConfig":"19"},{"size":1449,"mtime":1617825660842,"results":"31","hashOfConfig":"19"},{"size":572,"mtime":1612640494149,"results":"32","hashOfConfig":"19"},{"size":5598,"mtime":1613508492663,"results":"33","hashOfConfig":"19"},{"size":1478,"mtime":1617827152275,"results":"34","hashOfConfig":"19"},{"size":9224,"mtime":1617827113084,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"jvmnhy",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"39"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"39"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\workspace\\exchange-ui\\src\\index.js",["76","77"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './obsolete/demo.css'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport CurrencyMultipleSearchSelection from \"./hexagon_currency_app/CurrencyMultipleSearchSelection\";\r\nimport CurrencySearchSelection from \"./hexagon_currency_app/CurrencySearchSelection\";\r\nimport CurrencyManager from \"./hexagon_currency_app/CurrencyManager\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <CurrencyManager/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["78","79"],"D:\\workspace\\exchange-ui\\src\\App.js",["80"],"import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from \"react\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <Hello/>\n                <p>Hello React!</p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nfunction Hello() {\n    return <div>Hello func!</div>\n}\n\nexport default App;\n",["81","82"],"D:\\workspace\\exchange-ui\\src\\reportWebVitals.js",[],"D:\\workspace\\exchange-ui\\src\\CurrencyElement.js",[],"D:\\workspace\\exchange-ui\\src\\CurrencyColors.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyMultipleSearchSelection.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencySearchSelection.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyManager.js",["83"],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyGridDisplay.js",["84","85","86","87","88","89","90","91","92","93","94"],"import PolygonGroup from \"./PolygonGroup\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {ClockwiseHexagonDirections, Directions, getOrientations, HexagonalDisplayType} from \"./PolygonUtil\";\r\nimport {getCurrencyColor} from \"../CurrencyColors\";\r\nimport {initHexagonPolygonRectangleGrid, getRadialExpansionSequence} from \"./HexagonGridUtils\";\r\nimport {getDiagonalStepValue, largeNumberFormatter} from \"./NumberFormattingUtil\";\r\nimport {LightenDarkenColor} from \"./ColorUtil\";\r\n\r\nconst useCurrencyGridDisplay = (props) => {\r\n    const [polygonCountLength, setPolygonCountLength] = useState(props.polygonCountLength);\r\n    const [polygonCountHeight, setPolygonCountHeight] = useState(props.polygonCountHeight);\r\n    const [defaultUnitPolygon, setDefaultUnitPolygon] = useState(props.defaultUnitPolygon);\r\n\r\n    let {tempAxialArray, tempAxialMap} = initHexagonPolygonRectangleGrid(polygonCountLength, polygonCountHeight, defaultUnitPolygon);\r\n\r\n    const [axialArray, setAxialArray] = useState(tempAxialArray);\r\n    const [axialMap, setAxialMap] = useState(tempAxialMap);\r\n\r\n    const [customizedPolygons, setCustomizedPolygons] = useState([]);\r\n    const [orientationX, setOrientationX] = useState(0);\r\n    const [orientationY, setOrientationY] = useState(0);\r\n    const [floatNumFault, setFloatNumFault] = useState(2);\r\n\r\n    function prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap) {\r\n        let centralTextBlockColor = getCurrencyColor(sourceCurrencyEntity);\r\n        let centerPolygonCoordinate = startPoints[Directions.CENTER].x + \",\" + startPoints[Directions.CENTER].y;\r\n        clonedAxialMap[centerPolygonCoordinate].fillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].strokeColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].innerFillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].text = sourceCurrencyEntity;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let currencyVisualizationData = props.currencyVisualizationData;\r\n\r\n        let type = currencyVisualizationData.type;\r\n        let sourceCurrencyEntity = currencyVisualizationData.sourceCurrency.entity;\r\n        let destinationCurrencies = currencyVisualizationData.destinationCurrencies;\r\n\r\n        if (sourceCurrencyEntity === \"\") {\r\n            return;\r\n        }\r\n        let clonedAxialMap = {...axialMap};\r\n\r\n        let startPoints = getOrientations(orientationX, orientationY);\r\n\r\n        prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap);\r\n\r\n\r\n        if (type === HexagonalDisplayType.RADIAL_GRID) {\r\n            destinationCurrencies.forEach((currency, index) => {\r\n                let direction = ClockwiseHexagonDirections[index];\r\n                let polygonCoordinateSequence = getRadialExpansionSequence(startPoints[direction].x, startPoints[direction].y, direction);\r\n                let displayValue = currency.value;\r\n                let stepValue = getDiagonalStepValue(displayValue, floatNumFault);\r\n\r\n                let currencyText = currency.entity;\r\n                let fillColor = '#ffffff';\r\n                let strokeColor = LightenDarkenColor(getCurrencyColor(currency.entity), -20);\r\n                let innerFillColor = getCurrencyColor(currency.entity);\r\n                let textBlockColor = LightenDarkenColor(innerFillColor, 30);\r\n\r\n                let sum = 0;\r\n                polygonCoordinateSequence.forEach((polygonCoordinate, index) => {\r\n                    if (index === 0) {\r\n                        //clonedAxialMap[polygonCoordinate].textFontSize = 20;\r\n                        clonedAxialMap[polygonCoordinate].text = currencyText + \"\\n\" + \"/\" + sourceCurrencyEntity;\r\n                        clonedAxialMap[polygonCoordinate].fillColor = textBlockColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = textBlockColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = textBlockColor;\r\n                    } else if (displayValue !== 0) {\r\n                        if (displayValue < stepValue) {\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum + displayValue);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = fillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            let innerPolygonRatio = displayValue / stepValue;\r\n                            clonedAxialMap[polygonCoordinate].innerPolygonRatio = innerPolygonRatio;\r\n                            displayValue = 0;\r\n                        } else {\r\n                            sum += stepValue;\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = innerFillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            displayValue -= stepValue;\r\n                        }\r\n                    } else {\r\n                        clonedAxialMap[polygonCoordinate].text = \"\";\r\n                        clonedAxialMap[polygonCoordinate].fillColor = defaultUnitPolygon.fillColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = defaultUnitPolygon.strokeColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = defaultUnitPolygon.innerFillColor;\r\n                        clonedAxialMap[polygonCoordinate].innerPolygonRatio = defaultUnitPolygon.innerPolygonRatio;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        setAxialMap(clonedAxialMap);\r\n\r\n    }, [props]);\r\n    return {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        defaultUnitPolygon,\r\n        customizedPolygons,\r\n        axialArray,\r\n        axialMap};\r\n}\r\n\r\nconst CurrencyGridDisplay = (props) => {\r\n    const {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        defaultUnitPolygon,\r\n        customizedPolygons,\r\n        axialArray,\r\n        axialMap,\r\n    } = useCurrencyGridDisplay(props);\r\n\r\n\r\n    return (\r\n        <>\r\n            <PolygonGroup\r\n                polygonCountLength={polygonCountLength}\r\n                polygonCountHeight={polygonCountHeight}\r\n                customizedPolygons={customizedPolygons}\r\n                axialArray={axialArray}\r\n                axialMap={axialMap}\r\n                defaultUnitPolygon={{\r\n                    edgeOffsetRatio: 0.036,\r\n                    startAngle: 90,\r\n                    numSides: 6,\r\n                    fillColor: '#ffffff',\r\n                    strokeColor: '#000000',\r\n                    text: \"\",\r\n                    textFontSize: 14,\r\n                    innerPolygonRatio: 0.0,\r\n                    innerFillColor: \"\",\r\n                }}\r\n            />\r\n        </>\r\n\r\n    );\r\n\r\n}\r\nexport default CurrencyGridDisplay;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonGroup.js",["95","96","97","98","99","100","101"],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\HexagonGridUtils.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\NumberFormattingUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\ColorUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\RegularConvexPolygon.js",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125"],"import React, {useEffect, useState} from 'react'\r\nimport PolygonUtils from \"./PolygonUtil\";\r\nimport PolygonInnerText from \"./PolygonInnerText\";\r\n\r\nconst useRegularConvexPolygon = (props) => {\r\n\r\n    const [widthRatio, setWidthRatio] = useState(props.widthRatio);\r\n    const [radius, setRadius] = useState(30);\r\n    const [edgeOffsetRatio, setEdgeOffsetRatio] = useState(props.edgeOffsetRatio);\r\n    const [startAngle, setStartAngle] = useState(props.startAngle);\r\n    const [numSides, setNumSides] = useState(props.numSides);\r\n    const [fillColor, setFillColor] = useState(props.fillColor);\r\n    const [strokeColor, setStrokeColor] = useState(props.strokeColor);\r\n    const [text, setText] = useState(props.text);\r\n    const [textFontSize, setTextFontSize] = useState(props.textFontSize);\r\n    const [innerPolygonRatio, setInnerPolygonRatio] = useState(props.innerPolygonRatio);\r\n    const [innerFillColor, setInnerFillColor] = useState(props.innerFillColor);\r\n\r\n    const [centerAng, setCenterAng] = useState(2 * Math.PI / numSides);\r\n    const [edgeOffsetLen, setEdgeOffsetLen] = useState(radius * edgeOffsetRatio / 2);\r\n\r\n    const tempGeneratedPoints = PolygonUtils.generatePoints(\r\n        numSides,\r\n        radius,\r\n        centerAng,\r\n        startAngle);\r\n\r\n    let generatedPointsOuter = PolygonUtils.generatePoints(\r\n        numSides,\r\n        radius + edgeOffsetLen,\r\n        centerAng,\r\n        startAngle);\r\n\r\n    const tempGeneratedPointsInner = PolygonUtils.generatePoints(\r\n        numSides,\r\n        (radius + edgeOffsetLen) * innerPolygonRatio,\r\n        centerAng,\r\n        startAngle);\r\n\r\n\r\n    const [edges, setEdges] = useState(PolygonUtils.getEdgePoints(generatedPointsOuter));\r\n    let dimensions = PolygonUtils.getDimensions(edges);\r\n\r\n    const [generatedPoints, setGeneratedPoints] = useState(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPoints, edges));\r\n    const [generatedPointsInner, setGeneratedPointsInner] = useState(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPointsInner, edges));\r\n\r\n    const [polygonCoordinates, setPolygonCoordinates] = useState(generatedPoints.map(pair => pair.join(',')).join(' '));\r\n    const [polygonCoordinatesInner, setPolygonCoordinatesInner] = useState(generatedPointsInner.map(pair => pair.join(',')).join(' '));\r\n\r\n    const [xDim, setXDim] = useState(dimensions.xDim);\r\n    const [yDim, setYDim] = useState(dimensions.yDim);\r\n\r\n    useEffect(() => {\r\n        setFillColor(props.fillColor);\r\n        setStrokeColor(props.strokeColor);\r\n        setInnerFillColor(props.innerFillColor);\r\n        setInnerPolygonRatio(props.innerPolygonRatio);\r\n        setText(props.text);\r\n        setTextFontSize(props.textFontSize);\r\n\r\n        const tempGeneratedPointsInner = PolygonUtils.generatePoints(\r\n            numSides,\r\n            (radius + edgeOffsetLen) * props.innerPolygonRatio,\r\n            centerAng,\r\n            startAngle);\r\n        setPolygonCoordinatesInner(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPointsInner, edges));\r\n\r\n    }, [props]);\r\n\r\n    const setTextWithFontSize = (text, textFontSize) => {\r\n        setText(text);\r\n        setTextFontSize(textFontSize);\r\n    }\r\n\r\n    const setColor = (fillColor, strokeColor, innerFillColor) => {\r\n        setFillColor(fillColor);\r\n        setStrokeColor(strokeColor);\r\n        setInnerFillColor(innerFillColor);\r\n    }\r\n\r\n    const setInnerPolygonFullnessRatio = (ratio) => {\r\n        let generatedPointsInner = PolygonUtils.generatePoints(\r\n            numSides,\r\n            (radius + edgeOffsetLen) * ratio,\r\n            centerAng,\r\n            startAngle);\r\n        generatedPointsInner = PolygonUtils.getShiftedPositiveQuadrant(generatedPointsInner, edges);\r\n        let polygonCoordinatesInner = generatedPointsInner.map(pair => pair.join(',')).join(' ');\r\n        setGeneratedPointsInner(generatedPointsInner);\r\n        setInnerPolygonRatio(ratio);\r\n        setPolygonCoordinatesInner(polygonCoordinatesInner);\r\n    }\r\n\r\n    return {\r\n        widthRatio,\r\n        edgeOffsetRatio,\r\n        startAngle,\r\n        numSides,\r\n        centerAng,\r\n        generatedPoints,\r\n        edgeOffsetLen,\r\n        edges,\r\n        xDim,\r\n        yDim,\r\n        polygonCoordinates,\r\n        polygonCoordinatesInner,\r\n        fillColor,\r\n        strokeColor,\r\n        text,\r\n        textFontSize,\r\n        innerPolygonRatio,\r\n        innerFillColor,\r\n    };\r\n}\r\n\r\nconst RegularConvexPolygon = (props) => {\r\n    const {\r\n        widthRatio,\r\n        edgeOffsetRatio,\r\n        startAngle,\r\n        numSides,\r\n        centerAng,\r\n        generatedPoints,\r\n        edgeOffsetLen,\r\n        edges,\r\n        xDim,\r\n        yDim,\r\n        polygonCoordinates,\r\n        polygonCoordinatesInner,\r\n        fillColor,\r\n        strokeColor,\r\n        text,\r\n        textFontSize,\r\n        innerPolygonRatio,\r\n        innerFillColor,\r\n    } = useRegularConvexPolygon(props);\r\n\r\n    return (\r\n        <svg\r\n            width={(widthRatio * 100) + \"%\"}\r\n            viewBox={\"0 0 \" + xDim + \" \" + yDim}\r\n            style={{verticalAlign: 'top'}}\r\n        >\r\n            <polygon points={polygonCoordinates} style={{\r\n                fill: fillColor,\r\n                stroke: strokeColor,\r\n                strokeWidth: (100 * edgeOffsetRatio) + \"%\",\r\n                verticalAlign: 'top'\r\n            }}/>\r\n            <polygon points={polygonCoordinatesInner} style={{\r\n                fill: innerFillColor,\r\n                verticalAlign: 'top'\r\n            }}/>\r\n            <PolygonInnerText text={text}/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default RegularConvexPolygon;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\PolygonInnerText.js",["126","127","128"],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\CurrencyCenteredDisplay.js",["129","130","131","132","133","134","135","136","137","138","139"],{"ruleId":"140","severity":1,"message":"141","line":7,"column":8,"nodeType":"142","messageId":"143","endLine":7,"endColumn":39},{"ruleId":"140","severity":1,"message":"144","line":8,"column":8,"nodeType":"142","messageId":"143","endLine":8,"endColumn":31},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"140","severity":1,"message":"149","line":3,"column":16,"nodeType":"142","messageId":"143","endLine":3,"endColumn":24},{"ruleId":"145","replacedBy":"150"},{"ruleId":"147","replacedBy":"151"},{"ruleId":"140","severity":1,"message":"152","line":12,"column":33,"nodeType":"142","messageId":"143","endLine":12,"endColumn":55},{"ruleId":"140","severity":1,"message":"153","line":10,"column":32,"nodeType":"142","messageId":"143","endLine":10,"endColumn":53},{"ruleId":"140","severity":1,"message":"154","line":11,"column":32,"nodeType":"142","messageId":"143","endLine":11,"endColumn":53},{"ruleId":"140","severity":1,"message":"155","line":12,"column":32,"nodeType":"142","messageId":"143","endLine":12,"endColumn":53},{"ruleId":"140","severity":1,"message":"156","line":16,"column":24,"nodeType":"142","messageId":"143","endLine":16,"endColumn":37},{"ruleId":"140","severity":1,"message":"157","line":19,"column":32,"nodeType":"142","messageId":"143","endLine":19,"endColumn":53},{"ruleId":"140","severity":1,"message":"158","line":20,"column":26,"nodeType":"142","messageId":"143","endLine":20,"endColumn":41},{"ruleId":"140","severity":1,"message":"159","line":21,"column":26,"nodeType":"142","messageId":"143","endLine":21,"endColumn":41},{"ruleId":"140","severity":1,"message":"160","line":22,"column":27,"nodeType":"142","messageId":"143","endLine":22,"endColumn":43},{"ruleId":"161","severity":1,"message":"162","line":68,"column":86,"nodeType":"163","messageId":"164","endLine":68,"endColumn":87},{"ruleId":"165","severity":1,"message":"166","line":101,"column":8,"nodeType":"167","endLine":101,"endColumn":15,"suggestions":"168"},{"ruleId":"140","severity":1,"message":"169","line":115,"column":9,"nodeType":"142","messageId":"143","endLine":115,"endColumn":27},{"ruleId":"140","severity":1,"message":"153","line":24,"column":32,"nodeType":"142","messageId":"143","endLine":24,"endColumn":53},{"ruleId":"140","severity":1,"message":"154","line":25,"column":32,"nodeType":"142","messageId":"143","endLine":25,"endColumn":53},{"ruleId":"140","severity":1,"message":"156","line":27,"column":24,"nodeType":"142","messageId":"143","endLine":27,"endColumn":37},{"ruleId":"140","severity":1,"message":"170","line":28,"column":22,"nodeType":"142","messageId":"143","endLine":28,"endColumn":33},{"ruleId":"140","severity":1,"message":"171","line":30,"column":24,"nodeType":"142","messageId":"143","endLine":30,"endColumn":37},{"ruleId":"140","severity":1,"message":"172","line":34,"column":29,"nodeType":"142","messageId":"143","endLine":34,"endColumn":47},{"ruleId":"140","severity":1,"message":"173","line":108,"column":9,"nodeType":"142","messageId":"143","endLine":108,"endColumn":27},{"ruleId":"140","severity":1,"message":"171","line":7,"column":24,"nodeType":"142","messageId":"143","endLine":7,"endColumn":37},{"ruleId":"140","severity":1,"message":"174","line":8,"column":20,"nodeType":"142","messageId":"143","endLine":8,"endColumn":29},{"ruleId":"140","severity":1,"message":"175","line":9,"column":29,"nodeType":"142","messageId":"143","endLine":9,"endColumn":47},{"ruleId":"140","severity":1,"message":"176","line":10,"column":24,"nodeType":"142","messageId":"143","endLine":10,"endColumn":37},{"ruleId":"140","severity":1,"message":"177","line":11,"column":22,"nodeType":"142","messageId":"143","endLine":11,"endColumn":33},{"ruleId":"140","severity":1,"message":"178","line":19,"column":23,"nodeType":"142","messageId":"143","endLine":19,"endColumn":35},{"ruleId":"140","severity":1,"message":"179","line":20,"column":27,"nodeType":"142","messageId":"143","endLine":20,"endColumn":43},{"ruleId":"140","severity":1,"message":"180","line":41,"column":19,"nodeType":"142","messageId":"143","endLine":41,"endColumn":27},{"ruleId":"140","severity":1,"message":"181","line":44,"column":29,"nodeType":"142","messageId":"143","endLine":44,"endColumn":47},{"ruleId":"140","severity":1,"message":"182","line":47,"column":32,"nodeType":"142","messageId":"143","endLine":47,"endColumn":53},{"ruleId":"140","severity":1,"message":"183","line":50,"column":18,"nodeType":"142","messageId":"143","endLine":50,"endColumn":25},{"ruleId":"140","severity":1,"message":"184","line":51,"column":18,"nodeType":"142","messageId":"143","endLine":51,"endColumn":25},{"ruleId":"165","severity":1,"message":"185","line":68,"column":8,"nodeType":"167","endLine":68,"endColumn":15,"suggestions":"186"},{"ruleId":"140","severity":1,"message":"187","line":70,"column":11,"nodeType":"142","messageId":"143","endLine":70,"endColumn":30},{"ruleId":"140","severity":1,"message":"188","line":75,"column":11,"nodeType":"142","messageId":"143","endLine":75,"endColumn":19},{"ruleId":"140","severity":1,"message":"189","line":81,"column":11,"nodeType":"142","messageId":"143","endLine":81,"endColumn":39},{"ruleId":"140","severity":1,"message":"190","line":120,"column":9,"nodeType":"142","messageId":"143","endLine":120,"endColumn":19},{"ruleId":"140","severity":1,"message":"191","line":121,"column":9,"nodeType":"142","messageId":"143","endLine":121,"endColumn":17},{"ruleId":"140","severity":1,"message":"192","line":122,"column":9,"nodeType":"142","messageId":"143","endLine":122,"endColumn":18},{"ruleId":"140","severity":1,"message":"193","line":123,"column":9,"nodeType":"142","messageId":"143","endLine":123,"endColumn":24},{"ruleId":"140","severity":1,"message":"194","line":124,"column":9,"nodeType":"142","messageId":"143","endLine":124,"endColumn":22},{"ruleId":"140","severity":1,"message":"195","line":125,"column":9,"nodeType":"142","messageId":"143","endLine":125,"endColumn":14},{"ruleId":"140","severity":1,"message":"196","line":133,"column":9,"nodeType":"142","messageId":"143","endLine":133,"endColumn":21},{"ruleId":"140","severity":1,"message":"197","line":134,"column":9,"nodeType":"142","messageId":"143","endLine":134,"endColumn":26},{"ruleId":"140","severity":1,"message":"198","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":28},{"ruleId":"140","severity":1,"message":"199","line":5,"column":12,"nodeType":"142","messageId":"143","endLine":5,"endColumn":22},{"ruleId":"140","severity":1,"message":"200","line":5,"column":24,"nodeType":"142","messageId":"143","endLine":5,"endColumn":37},{"ruleId":"140","severity":1,"message":"201","line":28,"column":24,"nodeType":"142","messageId":"143","endLine":28,"endColumn":37},{"ruleId":"140","severity":1,"message":"155","line":29,"column":32,"nodeType":"142","messageId":"143","endLine":29,"endColumn":53},{"ruleId":"140","severity":1,"message":"156","line":33,"column":24,"nodeType":"142","messageId":"143","endLine":33,"endColumn":37},{"ruleId":"140","severity":1,"message":"157","line":35,"column":32,"nodeType":"142","messageId":"143","endLine":35,"endColumn":53},{"ruleId":"140","severity":1,"message":"158","line":36,"column":26,"nodeType":"142","messageId":"143","endLine":36,"endColumn":41},{"ruleId":"140","severity":1,"message":"159","line":37,"column":26,"nodeType":"142","messageId":"143","endLine":37,"endColumn":41},{"ruleId":"140","severity":1,"message":"160","line":38,"column":27,"nodeType":"142","messageId":"143","endLine":38,"endColumn":43},{"ruleId":"161","severity":1,"message":"162","line":85,"column":86,"nodeType":"163","messageId":"164","endLine":85,"endColumn":87},{"ruleId":"140","severity":1,"message":"202","line":127,"column":21,"nodeType":"142","messageId":"143","endLine":127,"endColumn":30},{"ruleId":"140","severity":1,"message":"203","line":130,"column":21,"nodeType":"142","messageId":"143","endLine":130,"endColumn":35},{"ruleId":"165","severity":1,"message":"166","line":149,"column":8,"nodeType":"167","endLine":149,"endColumn":15,"suggestions":"204"},"no-unused-vars","'CurrencyMultipleSearchSelection' is defined but never used.","Identifier","unusedVar","'CurrencySearchSelection' is defined but never used.","no-native-reassign",["205"],"no-negated-in-lhs",["206"],"'useState' is defined but never used.",["205"],["206"],"'setCurrencyDisplayType' is assigned a value but never used.","'setPolygonCountLength' is assigned a value but never used.","'setPolygonCountHeight' is assigned a value but never used.","'setDefaultUnitPolygon' is assigned a value but never used.","'setAxialArray' is assigned a value but never used.","'setCustomizedPolygons' is assigned a value but never used.","'setOrientationX' is assigned a value but never used.","'setOrientationY' is assigned a value but never used.","'setFloatNumFault' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'axialMap', 'defaultUnitPolygon.fillColor', 'defaultUnitPolygon.innerFillColor', 'defaultUnitPolygon.innerPolygonRatio', 'defaultUnitPolygon.strokeColor', 'floatNumFault', 'orientationX', and 'orientationY'. Either include them or remove the dependency array.","ArrayExpression",["207"],"'defaultUnitPolygon' is assigned a value but never used.","'setAxialMap' is assigned a value but never used.","'setWidthRatio' is assigned a value but never used.","'setGroupLayoutType' is assigned a value but never used.","'polygonCountHeight' is assigned a value but never used.","'setRadius' is assigned a value but never used.","'setEdgeOffsetRatio' is assigned a value but never used.","'setStartAngle' is assigned a value but never used.","'setNumSides' is assigned a value but never used.","'setCenterAng' is assigned a value but never used.","'setEdgeOffsetLen' is assigned a value but never used.","'setEdges' is assigned a value but never used.","'setGeneratedPoints' is assigned a value but never used.","'setPolygonCoordinates' is assigned a value but never used.","'setXDim' is assigned a value but never used.","'setYDim' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'centerAng', 'edgeOffsetLen', 'edges', 'numSides', 'radius', and 'startAngle'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPolygonCoordinatesInner' needs the current value of 'edges'.",["208"],"'setTextWithFontSize' is assigned a value but never used.","'setColor' is assigned a value but never used.","'setInnerPolygonFullnessRatio' is assigned a value but never used.","'startAngle' is assigned a value but never used.","'numSides' is assigned a value but never used.","'centerAng' is assigned a value but never used.","'generatedPoints' is assigned a value but never used.","'edgeOffsetLen' is assigned a value but never used.","'edges' is assigned a value but never used.","'textFontSize' is assigned a value but never used.","'innerPolygonRatio' is assigned a value but never used.","'RegularConvexPolygon' is defined but never used.","'lineMargin' is assigned a value but never used.","'setLineMargin' is assigned a value but never used.","'setEdgeLength' is assigned a value but never used.","'fillColor' is assigned a value but never used.","'textBlockColor' is assigned a value but never used.",["209"],"no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"210","fix":"214"},"Update the dependencies array to be: [axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, floatNumFault, orientationX, orientationY, props]",{"range":"215","text":"216"},"Update the dependencies array to be: [centerAng, edgeOffsetLen, edges, numSides, props, radius, startAngle]",{"range":"217","text":"218"},{"range":"219","text":"216"},[5912,5919],"[axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, floatNumFault, orientationX, orientationY, props]",[3034,3041],"[centerAng, edgeOffsetLen, edges, numSides, props, radius, startAngle]",[8101,8108]]