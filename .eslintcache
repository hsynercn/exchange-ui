[{"D:\\workspace\\exchange-ui\\src\\index.js":"1","D:\\workspace\\exchange-ui\\src\\App.js":"2","D:\\workspace\\exchange-ui\\src\\reportWebVitals.js":"3","D:\\workspace\\exchange-ui\\src\\CurrencyElement.js":"4","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyMultipleSearchSelection.js":"5","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyManager.js":"6","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencySearchSelection.js":"7","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyGridDisplay.js":"8","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyCenteredDisplay.js":"9","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\ECBDataSourceInformer.js":"10","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\PolygonUtil.js":"11","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Polygon\\HexagonalDisplayTypeMenu.js":"12","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Polygon\\PolygonGroup.js":"13","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\HexagonGridUtils.js":"14","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\NumberFormattingUtil.js":"15","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\ColorUtil.js":"16","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Polygon\\RegularConvexPolygon.js":"17","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Polygon\\PolygonInnerText.js":"18","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\DeviceUtil.js":"19","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyColors.js":"20"},{"size":666,"mtime":1618744712652,"results":"21","hashOfConfig":"22"},{"size":815,"mtime":1606335366352,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":831,"mtime":1608616994339,"results":"25","hashOfConfig":"22"},{"size":1034,"mtime":1618775669627,"results":"26","hashOfConfig":"22"},{"size":9561,"mtime":1619206069411,"results":"27","hashOfConfig":"22"},{"size":654,"mtime":1618775660523,"results":"28","hashOfConfig":"22"},{"size":7176,"mtime":1618744862469,"results":"29","hashOfConfig":"22"},{"size":10005,"mtime":1618744862270,"results":"30","hashOfConfig":"22"},{"size":602,"mtime":1618772494445,"results":"31","hashOfConfig":"22"},{"size":3859,"mtime":1617654857663,"results":"32","hashOfConfig":"22"},{"size":590,"mtime":1618739220877,"results":"33","hashOfConfig":"22"},{"size":5562,"mtime":1618738690052,"results":"34","hashOfConfig":"22"},{"size":4347,"mtime":1617484040657,"results":"35","hashOfConfig":"22"},{"size":1449,"mtime":1618671349320,"results":"36","hashOfConfig":"22"},{"size":572,"mtime":1612640494149,"results":"37","hashOfConfig":"22"},{"size":5604,"mtime":1618738690064,"results":"38","hashOfConfig":"22"},{"size":1768,"mtime":1618685619528,"results":"39","hashOfConfig":"22"},{"size":2150,"mtime":1618739382947,"results":"40","hashOfConfig":"22"},{"size":11025,"mtime":1613421432834,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"jvmnhy",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"D:\\workspace\\exchange-ui\\src\\index.js",[],["93","94"],"D:\\workspace\\exchange-ui\\src\\App.js",["95"],"import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from \"react\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <Hello/>\n                <p>Hello React!</p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nfunction Hello() {\n    return <div>Hello func!</div>\n}\n\nexport default App;\n",["96","97"],"D:\\workspace\\exchange-ui\\src\\reportWebVitals.js",[],"D:\\workspace\\exchange-ui\\src\\CurrencyElement.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyMultipleSearchSelection.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyManager.js",["98"],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencySearchSelection.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyGridDisplay.js",["99","100","101","102","103","104","105","106","107","108","109"],"import PolygonGroup from \"../Polygon/PolygonGroup\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {ClockwiseHexagonRegions, Directions, getRegionalOrientations, HexagonalDisplayType} from \"../Util/PolygonUtil\";\r\nimport {getCurrencyColor} from \"../../CurrencyColors\";\r\nimport {initHexagonPolygonRectangleGrid, getRadialExpansionSequence} from \"../Util/HexagonGridUtils\";\r\nimport {getDiagonalStepValue, largeNumberFormatter} from \"../Util/NumberFormattingUtil\";\r\nimport {LightenDarkenColor} from \"../Util/ColorUtil\";\r\n\r\nconst useCurrencyGridDisplay = (props) => {\r\n    const [polygonCountLength, setPolygonCountLength] = useState(props.polygonCountLength);\r\n    const [polygonCountHeight, setPolygonCountHeight] = useState(props.polygonCountHeight);\r\n    const [defaultUnitPolygon, setDefaultUnitPolygon] = useState(props.defaultUnitPolygon);\r\n\r\n    let {tempAxialArray, tempAxialMap} = initHexagonPolygonRectangleGrid(polygonCountLength, polygonCountHeight, defaultUnitPolygon);\r\n\r\n    const [axialArray, setAxialArray] = useState(tempAxialArray);\r\n    const [axialMap, setAxialMap] = useState(tempAxialMap);\r\n\r\n    const [customizedPolygons, setCustomizedPolygons] = useState([]);\r\n    const [orientationX, setOrientationX] = useState(0);\r\n    const [orientationY, setOrientationY] = useState(0);\r\n    const [floatNumFault, setFloatNumFault] = useState(2);\r\n\r\n    function prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap) {\r\n        let centralTextBlockColor = getCurrencyColor(sourceCurrencyEntity);\r\n        let centerPolygonCoordinate = startPoints[Directions.CENTER].x + \",\" + startPoints[Directions.CENTER].y;\r\n        clonedAxialMap[centerPolygonCoordinate].fillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].strokeColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].innerFillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].text = sourceCurrencyEntity;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let currencyVisualizationData = props.currencyVisualizationData;\r\n\r\n        let type = currencyVisualizationData.type;\r\n        let sourceCurrencyEntity = currencyVisualizationData.sourceCurrency.entity;\r\n        let destinationCurrencies = currencyVisualizationData.destinationCurrencies;\r\n\r\n        if (sourceCurrencyEntity === \"\") {\r\n            return;\r\n        }\r\n        let clonedAxialMap = {...axialMap};\r\n\r\n        let startPoints = getRegionalOrientations(orientationX, orientationY);\r\n\r\n        prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap);\r\n\r\n\r\n        if (type === HexagonalDisplayType.RADIAL_GRID) {\r\n            destinationCurrencies.forEach((currency, index) => {\r\n                let direction = ClockwiseHexagonRegions[index];\r\n                let polygonCoordinateSequence = getRadialExpansionSequence(startPoints[direction].x, startPoints[direction].y, direction);\r\n                let displayValue = currency.value;\r\n                let stepValue = getDiagonalStepValue(displayValue, floatNumFault);\r\n\r\n                let currencyText = currency.entity;\r\n                let fillColor = '#ffffff';\r\n                let strokeColor = LightenDarkenColor(getCurrencyColor(currency.entity), -20);\r\n                let innerFillColor = getCurrencyColor(currency.entity);\r\n                let textBlockColor = LightenDarkenColor(innerFillColor, 30);\r\n\r\n                let sum = 0;\r\n                polygonCoordinateSequence.forEach((polygonCoordinate, index) => {\r\n                    if (index === 0) {\r\n                        //clonedAxialMap[polygonCoordinate].textFontSize = 20;\r\n                        clonedAxialMap[polygonCoordinate].text = currencyText + \"\\n\" + \"/\" + sourceCurrencyEntity;\r\n                        clonedAxialMap[polygonCoordinate].fillColor = textBlockColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = textBlockColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = textBlockColor;\r\n                    } else if (displayValue !== 0) {\r\n                        if (displayValue < stepValue) {\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum + displayValue);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = fillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            let innerPolygonRatio = displayValue / stepValue;\r\n                            clonedAxialMap[polygonCoordinate].innerPolygonRatio = innerPolygonRatio;\r\n                            displayValue = 0;\r\n                        } else {\r\n                            sum += stepValue;\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = innerFillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            displayValue -= stepValue;\r\n                        }\r\n                    } else {\r\n                        clonedAxialMap[polygonCoordinate].text = \"\";\r\n                        clonedAxialMap[polygonCoordinate].fillColor = defaultUnitPolygon.fillColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = defaultUnitPolygon.strokeColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = defaultUnitPolygon.innerFillColor;\r\n                        clonedAxialMap[polygonCoordinate].innerPolygonRatio = defaultUnitPolygon.innerPolygonRatio;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        setAxialMap(clonedAxialMap);\r\n\r\n    }, [props]);\r\n    return {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        defaultUnitPolygon,\r\n        customizedPolygons,\r\n        axialArray,\r\n        axialMap};\r\n}\r\n\r\nconst CurrencyGridDisplay = (props) => {\r\n    const {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        defaultUnitPolygon,\r\n        customizedPolygons,\r\n        axialArray,\r\n        axialMap,\r\n    } = useCurrencyGridDisplay(props);\r\n\r\n\r\n    return (\r\n        <>\r\n            <PolygonGroup\r\n                polygonCountLength={polygonCountLength}\r\n                polygonCountHeight={polygonCountHeight}\r\n                customizedPolygons={customizedPolygons}\r\n                axialArray={axialArray}\r\n                axialMap={axialMap}\r\n                defaultUnitPolygon={{\r\n                    edgeOffsetRatio: 0.036,\r\n                    startAngle: 90,\r\n                    numSides: 6,\r\n                    fillColor: '#ffffff',\r\n                    strokeColor: '#000000',\r\n                    text: \"\",\r\n                    textFontSize: 14,\r\n                    innerPolygonRatio: 0.0,\r\n                    innerFillColor: \"\",\r\n                }}\r\n            />\r\n        </>\r\n\r\n    );\r\n\r\n}\r\nexport default CurrencyGridDisplay;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyCenteredDisplay.js",["110","111","112","113","114","115","116","117","118","119","120","121"],"import {useEffect, useState} from \"react\";\r\nimport {getRadialExpansionSequence, initHexagonPolygonCenteredGrid} from \"../Util/HexagonGridUtils\";\r\nimport PolygonGroup from \"../Polygon/PolygonGroup\";\r\nimport {getCurrencyColor} from \"./CurrencyColors\";\r\nimport {\r\n    ClockwiseHexagonDirections,\r\n    ClockwiseHexagonRegions,\r\n    Directions, getDirectionalOrientations,\r\n    getRegionalOrientations,\r\n    HexagonalDisplayType\r\n} from \"../Util/PolygonUtil\";\r\nimport {detailedNumberFormatter, getDiagonalStepValue, largeNumberFormatter} from \"../Util/NumberFormattingUtil\";\r\nimport {LightenDarkenColor} from \"../Util/ColorUtil\";\r\n\r\nfunction formatDailyChangeString(currency) {\r\n    let changeDataString = \"\";\r\n    if (currency.dailyChange > 0) {\r\n        changeDataString = \"+\" + detailedNumberFormatter(currency.dailyChange) +\r\n            \"(+\" + largeNumberFormatter(currency.dailyChangeRate * 100) + \"%)\";\r\n    } else {\r\n        changeDataString = detailedNumberFormatter(currency.dailyChange) +\r\n            \"(\" + largeNumberFormatter(currency.dailyChangeRate * 100) + \"%)\";\r\n    }\r\n    return changeDataString;\r\n}\r\n\r\nconst useCurrencyCenteredDisplay = (props) => {\r\n    const [edgeLength, setEdgeLength] = useState(props.edgeLength);\r\n    const [defaultUnitPolygon, setDefaultUnitPolygon] = useState(props.defaultUnitPolygon);\r\n\r\n    let {tempAxialArray, tempAxialMap} = initHexagonPolygonCenteredGrid(edgeLength, defaultUnitPolygon);\r\n\r\n    const [axialArray, setAxialArray] = useState(tempAxialArray);\r\n    const [axialMap, setAxialMap] = useState(tempAxialMap);\r\n    const [customizedPolygons, setCustomizedPolygons] = useState([]);\r\n    const [orientationX, setOrientationX] = useState(0);\r\n    const [orientationY, setOrientationY] = useState(0);\r\n    const [floatNumFault, setFloatNumFault] = useState(2);\r\n\r\n    function prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap) {\r\n        let centralTextBlockColor = getCurrencyColor(sourceCurrencyEntity);\r\n        let centerPolygonCoordinate = startPoints[Directions.CENTER].x + \",\" + startPoints[Directions.CENTER].y;\r\n        clonedAxialMap[centerPolygonCoordinate].fillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].strokeColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].innerFillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].text = sourceCurrencyEntity;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let currencyVisualizationData = props.currencyVisualizationData;\r\n\r\n        let type = props.type;\r\n        let sourceCurrencyEntity = currencyVisualizationData.sourceCurrency.entity;\r\n        let destinationCurrencies = currencyVisualizationData.destinationCurrencies;\r\n\r\n        if (sourceCurrencyEntity === \"\") {\r\n            return;\r\n        }\r\n        let clonedAxialMap = {...axialMap};\r\n\r\n        Object.keys(clonedAxialMap).forEach(function(key) {\r\n            clonedAxialMap[key].text = defaultUnitPolygon.text;\r\n            clonedAxialMap[key].fillColor = defaultUnitPolygon.fillColor;\r\n            clonedAxialMap[key].strokeColor = defaultUnitPolygon.strokeColor;\r\n            clonedAxialMap[key].innerFillColor = defaultUnitPolygon.innerFillColor;\r\n        });\r\n\r\n        if (type === HexagonalDisplayType.RADIAL_CENTERED) {\r\n\r\n            let regionalOrientations = getRegionalOrientations(orientationX, orientationY);\r\n\r\n            prepareCenterPolygon(sourceCurrencyEntity, regionalOrientations, clonedAxialMap);\r\n\r\n            destinationCurrencies.forEach((currency, index) => {\r\n                let direction = ClockwiseHexagonRegions[index];\r\n                let polygonCoordinateSequence = getRadialExpansionSequence(regionalOrientations[direction].x, regionalOrientations[direction].y, direction);\r\n                let displayValue = currency.value;\r\n                let stepValue = getDiagonalStepValue(displayValue, floatNumFault);\r\n\r\n                let currencyText = currency.entity;\r\n                let fillColor = '#ffffff';\r\n                let strokeColor = LightenDarkenColor(getCurrencyColor(currency.entity), -20);\r\n                let innerFillColor = getCurrencyColor(currency.entity);\r\n                let textBlockColor = LightenDarkenColor(innerFillColor, 30);\r\n\r\n                let sum = 0;\r\n                polygonCoordinateSequence.forEach((polygonCoordinate, index) => {\r\n                    if (index === 0) {\r\n                        //clonedAxialMap[polygonCoordinate].textFontSize = 20;\r\n                        clonedAxialMap[polygonCoordinate].text = currencyText + \"\\n\" + \"/\" + sourceCurrencyEntity;\r\n                        clonedAxialMap[polygonCoordinate].fillColor = textBlockColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = textBlockColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = textBlockColor;\r\n                    } else if (displayValue !== 0) {\r\n                        if (displayValue < stepValue) {\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum + displayValue);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = fillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            let innerPolygonRatio = displayValue / stepValue;\r\n                            clonedAxialMap[polygonCoordinate].innerPolygonRatio = innerPolygonRatio;\r\n                            displayValue = 0;\r\n                        } else {\r\n                            sum += stepValue;\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = innerFillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            displayValue -= stepValue;\r\n                        }\r\n                    } else {\r\n                        clonedAxialMap[polygonCoordinate].text = \"\";\r\n                        clonedAxialMap[polygonCoordinate].fillColor = defaultUnitPolygon.fillColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = defaultUnitPolygon.strokeColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = defaultUnitPolygon.innerFillColor;\r\n                        clonedAxialMap[polygonCoordinate].innerPolygonRatio = defaultUnitPolygon.innerPolygonRatio;\r\n                    }\r\n                });\r\n            });\r\n        } else if (type === HexagonalDisplayType.BASIC_CENTERED) {\r\n\r\n            let directionalOrientations = getDirectionalOrientations(orientationX, orientationY);\r\n\r\n            let mainColor = \"#cacaca\";\r\n\r\n            let centralTextBlockColor = getCurrencyColor(sourceCurrencyEntity);\r\n            let centerPolygonCoordinate = directionalOrientations[Directions.CENTER].x + \",\" + directionalOrientations[Directions.CENTER].y;\r\n            clonedAxialMap[centerPolygonCoordinate].fillColor = mainColor;\r\n            clonedAxialMap[centerPolygonCoordinate].strokeColor = mainColor;\r\n            clonedAxialMap[centerPolygonCoordinate].innerFillColor = mainColor;\r\n            clonedAxialMap[centerPolygonCoordinate].text = sourceCurrencyEntity;\r\n\r\n\r\n            destinationCurrencies.forEach((currency, index) => {\r\n                let direction = ClockwiseHexagonDirections[index];\r\n                let polygonCoordinate = directionalOrientations[direction].x + \",\" + directionalOrientations[direction].y;\r\n                let displayValue = currency.value;\r\n\r\n                let currencyText = currency.entity;\r\n                let fillColor = mainColor;\r\n                let strokeColor = mainColor;\r\n                let innerFillColor = strokeColor;\r\n                let textBlockColor = LightenDarkenColor(innerFillColor, 30);\r\n\r\n                if(displayValue !== 0) {\r\n                    let currencyValueString = detailedNumberFormatter(displayValue);\r\n                    let changeDataString = formatDailyChangeString(currency);\r\n                    clonedAxialMap[polygonCoordinate].text =\r\n                        currencyText + \"/\" + sourceCurrencyEntity + \"\\n\"\r\n                        + currencyValueString + \"\\n\"\r\n                        + changeDataString;\r\n                } else {\r\n                    clonedAxialMap[polygonCoordinate].text =\r\n                        \"\\n  \" + currencyText + \"/\" + sourceCurrencyEntity + \"  \\n\";\r\n                }\r\n                clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n            });\r\n        }\r\n        setAxialMap(clonedAxialMap);\r\n\r\n    }, [props]);\r\n\r\n    return {\r\n        edgeLength,\r\n        customizedPolygons,\r\n        axialArray,\r\n        axialMap\r\n    };\r\n}\r\n\r\nconst CurrencyCenteredDisplay = (props) => {\r\n    const {\r\n        edgeLength,\r\n        customizedPolygons,\r\n        axialArray,\r\n        axialMap\r\n    } = useCurrencyCenteredDisplay(props);\r\n\r\n    return (\r\n        <>\r\n            <PolygonGroup\r\n                polygonCountLength={2 * edgeLength - 1}\r\n                polygonCountHeight={2 * edgeLength - 1}\r\n                customizedPolygons={customizedPolygons}\r\n                axialArray={axialArray}\r\n                axialMap={axialMap}\r\n                defaultUnitPolygon={{\r\n                    edgeOffsetRatio: 0.036,\r\n                    startAngle: 90,\r\n                    numSides: 6,\r\n                    fillColor: '#ffffff',\r\n                    strokeColor: '#000000',\r\n                    text: \"\",\r\n                    textFontSize: 14,\r\n                    innerPolygonRatio: 0.0,\r\n                    innerFillColor: \"\",\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n}\r\nexport default CurrencyCenteredDisplay;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\ECBDataSourceInformer.js",["122"],"\r\nconst ECBDataSourceInformer = (props) => {\r\n    return (\r\n        <div style={{\r\n            width: \"90%\",\r\n            margin: \"1% auto\"\r\n        }}>\r\n            <p>\r\n                Financial data source of this site is the European Central Bank, and shared information\r\n                may be obtained free of charge through this <a\r\n                href=\"https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html\"\r\n                target=\"_blank\">website</a>.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ECBDataSourceInformer;\r\n","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\PolygonUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Polygon\\HexagonalDisplayTypeMenu.js",["123"],"import React from 'react'\r\nimport {Menu, Dropdown} from 'semantic-ui-react'\r\nimport {HexagonalDisplayType} from \"../Util/PolygonUtil\";\r\n\r\n\r\nconst HexagonalDisplayTypeMenu = (props) => {\r\n\r\n    const handleChange = (e, result) => {\r\n        props.setValue(result.value)\r\n    };\r\n\r\n    return (<Menu>\r\n        <Dropdown\r\n            item\r\n            simple\r\n            text='View'\r\n            direction='right'\r\n            options={props.options}\r\n            value={props.value}\r\n            onChange={handleChange}\r\n        />\r\n    </Menu>)\r\n}\r\n\r\nexport default HexagonalDisplayTypeMenu","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Polygon\\PolygonGroup.js",["124","125","126","127","128","129","130"],"import RegularConvexPolygon from \"./RegularConvexPolygon\";\r\nimport React, {useState} from \"react\";\r\nimport {PolygonType} from \"../Util/PolygonUtil\";\r\n\r\nfunction getPolygonGroupType(axialArray) {\r\n    let arrayLength = axialArray.length;\r\n    let i = 0;\r\n    while (i < arrayLength) {\r\n        if (arrayLength !== axialArray[i].length) {\r\n            return PolygonType.CENTERED;\r\n        }\r\n        i++;\r\n    }\r\n    return PolygonType.GRID;\r\n}\r\n\r\nconst usePolygonGroup = (props) => {\r\n\r\n    let length = props.polygonCountLength;\r\n    let height = props.polygonCountHeight;\r\n    length = length % 2 === 1 ? length : length + 1;\r\n    height = height % 2 === 1 ? height : height + 1;\r\n\r\n    const [polygonCountLength, setPolygonCountLength] = useState(length);\r\n    const [polygonCountHeight, setPolygonCountHeight] = useState(height);\r\n\r\n    const [axialArray, setAxialArray] = useState(props.axialArray);\r\n    const [axialMap, setAxialMap] = useState(props.axialMap);\r\n\r\n    const [widthRatio, setWidthRatio] = useState(1 / polygonCountLength);\r\n\r\n    let layoutType = getPolygonGroupType(axialArray);\r\n\r\n    const [groupLayoutType, setGroupLayoutType] = useState(layoutType);\r\n\r\n    return {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        axialArray,\r\n        axialMap,\r\n        widthRatio,\r\n        groupLayoutType\r\n    };\r\n}\r\n\r\nfunction generateRectangleGridMargins(axialArray, index, dynamicStyle, horizontalMargin, verticalMargin) {\r\n    if (axialArray.length === index + 1) {\r\n        dynamicStyle = {\r\n            marginRight: horizontalMargin + \"%\",\r\n        };\r\n    } else if (index % 2 === 0) {\r\n        if (index === 0) {\r\n            dynamicStyle = {\r\n                marginRight: horizontalMargin + \"%\",\r\n                marginBottom: \"-\" + verticalMargin + \"%\",\r\n            };\r\n        } else {\r\n            dynamicStyle = {\r\n                marginRight: horizontalMargin + \"%\",\r\n                marginBottom: \"-\" + verticalMargin + \"%\",\r\n            };\r\n        }\r\n    } else {\r\n        dynamicStyle = {\r\n            marginLeft: horizontalMargin + \"%\",\r\n            marginBottom: \"-\" + verticalMargin + \"%\",\r\n        };\r\n    }\r\n    return dynamicStyle;\r\n}\r\n\r\nfunction generateCenteredGridMargins(polygonCountLength, row, tempWidthRatio, axialArray, index, dynamicStyle, horizontalMargin, verticalMargin) {\r\n    let space = polygonCountLength - row.length;\r\n\r\n    tempWidthRatio = 1 / row.length;\r\n    if (axialArray.length === index + 1) {\r\n        dynamicStyle = {\r\n            marginLeft: (horizontalMargin * space) + \"%\",\r\n            marginRight: (horizontalMargin * space) + \"%\",\r\n        };\r\n    } else if (index % 2 === 0) {\r\n        if (index === 0) {\r\n            dynamicStyle = {\r\n                marginLeft: (horizontalMargin * space) + \"%\",\r\n                marginBottom: \"-\" + verticalMargin + \"%\",\r\n                marginRight: (horizontalMargin * space) + \"%\",\r\n            };\r\n        } else {\r\n            dynamicStyle = {\r\n                marginLeft: (horizontalMargin * space) + \"%\",\r\n                marginBottom: \"-\" + verticalMargin + \"%\",\r\n                marginRight: (horizontalMargin * space) + \"%\",\r\n            };\r\n        }\r\n    } else {\r\n        dynamicStyle = {\r\n            marginLeft: (horizontalMargin * space) + \"%\",\r\n            marginBottom: \"-\" + verticalMargin + \"%\",\r\n            marginRight: (horizontalMargin * space) + \"%\",\r\n        };\r\n    }\r\n    return {tempWidthRatio, dynamicStyle};\r\n}\r\n\r\nconst PolygonGroup = (props) => {\r\n    const {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        axialArray,\r\n        axialMap,\r\n        widthRatio,\r\n        groupLayoutType\r\n    } = usePolygonGroup(props);\r\n\r\n    let horizontalMargin = 0;\r\n    let verticalMargin = 0;\r\n\r\n    if (groupLayoutType === PolygonType.GRID) {\r\n        horizontalMargin = (1 / ((polygonCountLength * 2) + 1)) * 100;\r\n        verticalMargin = horizontalMargin / Math.sqrt(3)\r\n    } else if (groupLayoutType === PolygonType.CENTERED) {\r\n        horizontalMargin = (1 / ((polygonCountLength * 2))) * 100;\r\n        verticalMargin = horizontalMargin / Math.sqrt(3)\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{\r\n            width: \"90%\",\r\n            overflowX: \"auto\",\r\n            overflowY: \"auto\",\r\n            margin: \"0 auto\"\r\n        }}>\r\n            {\r\n                axialArray.map((row, index) => {\r\n                        let dynamicStyle = {};\r\n                        let tempWidthRatio = widthRatio;\r\n                        if (groupLayoutType === PolygonType.GRID) {\r\n                            dynamicStyle = generateRectangleGridMargins(axialArray, index, dynamicStyle, horizontalMargin, verticalMargin);\r\n                            tempWidthRatio = widthRatio;\r\n                        } else if (groupLayoutType === PolygonType.CENTERED) {\r\n                            let  __ret = generateCenteredGridMargins(polygonCountLength, row, tempWidthRatio, axialArray, index, dynamicStyle, horizontalMargin, verticalMargin);\r\n                            tempWidthRatio = __ret.tempWidthRatio;\r\n                            dynamicStyle = __ret.dynamicStyle;\r\n                        }\r\n                        return <div\r\n                            style={dynamicStyle}>{\r\n                            row.map((element, index) => <RegularConvexPolygon widthRatio={tempWidthRatio} {...axialMap[element]}\r\n                            />)\r\n                        }</div>\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default PolygonGroup;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\HexagonGridUtils.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\NumberFormattingUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\ColorUtil.js",[],"D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Polygon\\RegularConvexPolygon.js",["131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"import React, {useEffect, useState} from 'react'\r\nimport PolygonUtils from \"../Util/PolygonUtil\";\r\nimport PolygonInnerText from \"./PolygonInnerText\";\r\n\r\nconst useRegularConvexPolygon = (props) => {\r\n\r\n    const [widthRatio, setWidthRatio] = useState(props.widthRatio);\r\n    const [radius, setRadius] = useState(30);\r\n    const [edgeOffsetRatio, setEdgeOffsetRatio] = useState(props.edgeOffsetRatio);\r\n    const [startAngle, setStartAngle] = useState(props.startAngle);\r\n    const [numSides, setNumSides] = useState(props.numSides);\r\n    const [fillColor, setFillColor] = useState(props.fillColor);\r\n    const [strokeColor, setStrokeColor] = useState(props.strokeColor);\r\n    const [text, setText] = useState(props.text);\r\n    const [textFontSize, setTextFontSize] = useState(props.textFontSize);\r\n    const [innerPolygonRatio, setInnerPolygonRatio] = useState(props.innerPolygonRatio);\r\n    const [innerFillColor, setInnerFillColor] = useState(props.innerFillColor);\r\n\r\n    const [centerAng, setCenterAng] = useState(2 * Math.PI / numSides);\r\n    const [edgeOffsetLen, setEdgeOffsetLen] = useState(radius * edgeOffsetRatio / 2);\r\n\r\n    const tempGeneratedPoints = PolygonUtils.generatePoints(\r\n        numSides,\r\n        radius,\r\n        centerAng,\r\n        startAngle);\r\n\r\n    let generatedPointsOuter = PolygonUtils.generatePoints(\r\n        numSides,\r\n        radius + edgeOffsetLen,\r\n        centerAng,\r\n        startAngle);\r\n\r\n    const tempGeneratedPointsInner = PolygonUtils.generatePoints(\r\n        numSides,\r\n        (radius + edgeOffsetLen) * innerPolygonRatio,\r\n        centerAng,\r\n        startAngle);\r\n\r\n\r\n    const [edges, setEdges] = useState(PolygonUtils.getEdgePoints(generatedPointsOuter));\r\n    let dimensions = PolygonUtils.getDimensions(edges);\r\n\r\n    const [generatedPoints, setGeneratedPoints] = useState(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPoints, edges));\r\n    const [generatedPointsInner, setGeneratedPointsInner] = useState(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPointsInner, edges));\r\n\r\n    const [polygonCoordinates, setPolygonCoordinates] = useState(generatedPoints.map(pair => pair.join(',')).join(' '));\r\n    const [polygonCoordinatesInner, setPolygonCoordinatesInner] = useState(generatedPointsInner.map(pair => pair.join(',')).join(' '));\r\n\r\n    const [xDim, setXDim] = useState(dimensions.xDim);\r\n    const [yDim, setYDim] = useState(dimensions.yDim);\r\n\r\n    useEffect(() => {\r\n        setFillColor(props.fillColor);\r\n        setStrokeColor(props.strokeColor);\r\n        setInnerFillColor(props.innerFillColor);\r\n        setInnerPolygonRatio(props.innerPolygonRatio);\r\n        setText(props.text);\r\n        setTextFontSize(props.textFontSize);\r\n\r\n        const tempGeneratedPointsInner = PolygonUtils.generatePoints(\r\n            numSides,\r\n            (radius + edgeOffsetLen) * props.innerPolygonRatio,\r\n            centerAng,\r\n            startAngle);\r\n        setPolygonCoordinatesInner(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPointsInner, edges));\r\n\r\n    }, [props]);\r\n\r\n    const setTextWithFontSize = (text, textFontSize) => {\r\n        setText(text);\r\n        setTextFontSize(textFontSize);\r\n    }\r\n\r\n    const setColor = (fillColor, strokeColor, innerFillColor) => {\r\n        setFillColor(fillColor);\r\n        setStrokeColor(strokeColor);\r\n        setInnerFillColor(innerFillColor);\r\n    }\r\n\r\n    const setInnerPolygonFullnessRatio = (ratio) => {\r\n        let generatedPointsInner = PolygonUtils.generatePoints(\r\n            numSides,\r\n            (radius + edgeOffsetLen) * ratio,\r\n            centerAng,\r\n            startAngle);\r\n        generatedPointsInner = PolygonUtils.getShiftedPositiveQuadrant(generatedPointsInner, edges);\r\n        let polygonCoordinatesInner = generatedPointsInner.map(pair => pair.join(',')).join(' ');\r\n        setGeneratedPointsInner(generatedPointsInner);\r\n        setInnerPolygonRatio(ratio);\r\n        setPolygonCoordinatesInner(polygonCoordinatesInner);\r\n    }\r\n\r\n    return {\r\n        widthRatio,\r\n        edgeOffsetRatio,\r\n        startAngle,\r\n        numSides,\r\n        centerAng,\r\n        generatedPoints,\r\n        edgeOffsetLen,\r\n        edges,\r\n        xDim,\r\n        yDim,\r\n        polygonCoordinates,\r\n        polygonCoordinatesInner,\r\n        fillColor,\r\n        strokeColor,\r\n        text,\r\n        textFontSize,\r\n        innerPolygonRatio,\r\n        innerFillColor,\r\n    };\r\n}\r\n\r\nconst RegularConvexPolygon = (props) => {\r\n    const {\r\n        widthRatio,\r\n        edgeOffsetRatio,\r\n        startAngle,\r\n        numSides,\r\n        centerAng,\r\n        generatedPoints,\r\n        edgeOffsetLen,\r\n        edges,\r\n        xDim,\r\n        yDim,\r\n        polygonCoordinates,\r\n        polygonCoordinatesInner,\r\n        fillColor,\r\n        strokeColor,\r\n        text,\r\n        textFontSize,\r\n        innerPolygonRatio,\r\n        innerFillColor,\r\n    } = useRegularConvexPolygon(props);\r\n\r\n    return (\r\n        <svg\r\n            width={(widthRatio * 100) + \"%\"}\r\n            viewBox={\"0 0 \" + xDim + \" \" + yDim}\r\n            style={{verticalAlign: 'top'}}\r\n        >\r\n            <polygon points={polygonCoordinates} style={{\r\n                fill: fillColor,\r\n                stroke: strokeColor,\r\n                strokeWidth: (100 * edgeOffsetRatio) + \"%\",\r\n                verticalAlign: 'top'\r\n            }}/>\r\n            <polygon points={polygonCoordinatesInner} style={{\r\n                fill: innerFillColor,\r\n                verticalAlign: 'top'\r\n            }}/>\r\n            <PolygonInnerText text={text}/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default RegularConvexPolygon;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Polygon\\PolygonInnerText.js",["155","156","157"],"import RegularConvexPolygon from \"./RegularConvexPolygon\";\r\nimport React, {useState} from \"react\";\r\n\r\nconst PolygonInnerText = (props) => {\r\n    const [lineMargin, setLineMargin] = useState(26);\r\n    return (\r\n        <>\r\n            {\r\n                props.text.split(\"\\n\").map((line, index, array) => {\r\n\r\n                    let fill = \"black\";\r\n                    let fontSize = \"medium\";\r\n                    let tempLineMargin = 26;\r\n                    if (array.length === 2) {\r\n                        fontSize = \"medium\";\r\n                        tempLineMargin = 26;\r\n                    } else if (array.length >= 3) {\r\n                        let lineSizes = [\"xx-small\", \"100%\", \"46%\"];\r\n                        fontSize = lineSizes[index];\r\n                        tempLineMargin = 20;\r\n                        if(index === 2 && line.includes(\"+\")) {\r\n                            fill = \"#19cc19\";\r\n                        } else if(index === 2 && line.includes(\"-\")) {\r\n                            fill = \"red\";\r\n                        }\r\n                    }\r\n\r\n                    return <text\r\n                        x={\"50%\"}\r\n                        //y={\"50%\"}\r\n                        y={(50 - ((array.length - 1) * (tempLineMargin / 2)) + (tempLineMargin * (index))) + \"%\"}\r\n                        // y={((40 + index * 20) + \"%\")}\r\n                        textAnchor={\"middle\"}\r\n                        dominant-baseline={\"middle\"}\r\n                        fontFamily={\"Arial\"}\r\n                        fill={fill}\r\n                        fontSize={fontSize}\r\n                        fontWeight={\"normal\"}\r\n                    >{line}</text>;\r\n                })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PolygonInnerText;","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Util\\DeviceUtil.js",["158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203"],"export function isMobile() {\r\n    var check = false;\r\n    (function(a){\r\n        if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4)))\r\n            check = true;\r\n    })(navigator.userAgent||navigator.vendor||window.opera);\r\n    return check;\r\n};","D:\\workspace\\exchange-ui\\src\\hexagon_currency_app\\Currency\\CurrencyColors.js",[],{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":3,"column":16,"nodeType":"210","messageId":"211","endLine":3,"endColumn":24},{"ruleId":"204","replacedBy":"212"},{"ruleId":"206","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":140,"column":8,"nodeType":"216","endLine":140,"endColumn":104,"suggestions":"217"},{"ruleId":"208","severity":1,"message":"218","line":10,"column":32,"nodeType":"210","messageId":"211","endLine":10,"endColumn":53},{"ruleId":"208","severity":1,"message":"219","line":11,"column":32,"nodeType":"210","messageId":"211","endLine":11,"endColumn":53},{"ruleId":"208","severity":1,"message":"220","line":12,"column":32,"nodeType":"210","messageId":"211","endLine":12,"endColumn":53},{"ruleId":"208","severity":1,"message":"221","line":16,"column":24,"nodeType":"210","messageId":"211","endLine":16,"endColumn":37},{"ruleId":"208","severity":1,"message":"222","line":19,"column":32,"nodeType":"210","messageId":"211","endLine":19,"endColumn":53},{"ruleId":"208","severity":1,"message":"223","line":20,"column":26,"nodeType":"210","messageId":"211","endLine":20,"endColumn":41},{"ruleId":"208","severity":1,"message":"224","line":21,"column":26,"nodeType":"210","messageId":"211","endLine":21,"endColumn":41},{"ruleId":"208","severity":1,"message":"225","line":22,"column":27,"nodeType":"210","messageId":"211","endLine":22,"endColumn":43},{"ruleId":"226","severity":1,"message":"227","line":68,"column":86,"nodeType":"228","messageId":"229","endLine":68,"endColumn":87},{"ruleId":"214","severity":1,"message":"230","line":101,"column":8,"nodeType":"216","endLine":101,"endColumn":15,"suggestions":"231"},{"ruleId":"208","severity":1,"message":"232","line":115,"column":9,"nodeType":"210","messageId":"211","endLine":115,"endColumn":27},{"ruleId":"208","severity":1,"message":"233","line":28,"column":24,"nodeType":"210","messageId":"211","endLine":28,"endColumn":37},{"ruleId":"208","severity":1,"message":"220","line":29,"column":32,"nodeType":"210","messageId":"211","endLine":29,"endColumn":53},{"ruleId":"208","severity":1,"message":"221","line":33,"column":24,"nodeType":"210","messageId":"211","endLine":33,"endColumn":37},{"ruleId":"208","severity":1,"message":"222","line":35,"column":32,"nodeType":"210","messageId":"211","endLine":35,"endColumn":53},{"ruleId":"208","severity":1,"message":"223","line":36,"column":26,"nodeType":"210","messageId":"211","endLine":36,"endColumn":41},{"ruleId":"208","severity":1,"message":"224","line":37,"column":26,"nodeType":"210","messageId":"211","endLine":37,"endColumn":41},{"ruleId":"208","severity":1,"message":"225","line":38,"column":27,"nodeType":"210","messageId":"211","endLine":38,"endColumn":43},{"ruleId":"226","severity":1,"message":"227","line":91,"column":86,"nodeType":"228","messageId":"229","endLine":91,"endColumn":87},{"ruleId":"208","severity":1,"message":"234","line":127,"column":17,"nodeType":"210","messageId":"211","endLine":127,"endColumn":38},{"ruleId":"208","severity":1,"message":"235","line":141,"column":21,"nodeType":"210","messageId":"211","endLine":141,"endColumn":30},{"ruleId":"208","severity":1,"message":"236","line":144,"column":21,"nodeType":"210","messageId":"211","endLine":144,"endColumn":35},{"ruleId":"214","severity":1,"message":"237","line":162,"column":8,"nodeType":"216","endLine":162,"endColumn":15,"suggestions":"238"},{"ruleId":"239","severity":1,"message":"240","line":12,"column":17,"nodeType":"241","endLine":12,"endColumn":32},{"ruleId":"208","severity":1,"message":"242","line":3,"column":9,"nodeType":"210","messageId":"211","endLine":3,"endColumn":29},{"ruleId":"208","severity":1,"message":"218","line":24,"column":32,"nodeType":"210","messageId":"211","endLine":24,"endColumn":53},{"ruleId":"208","severity":1,"message":"219","line":25,"column":32,"nodeType":"210","messageId":"211","endLine":25,"endColumn":53},{"ruleId":"208","severity":1,"message":"221","line":27,"column":24,"nodeType":"210","messageId":"211","endLine":27,"endColumn":37},{"ruleId":"208","severity":1,"message":"243","line":28,"column":22,"nodeType":"210","messageId":"211","endLine":28,"endColumn":33},{"ruleId":"208","severity":1,"message":"244","line":30,"column":24,"nodeType":"210","messageId":"211","endLine":30,"endColumn":37},{"ruleId":"208","severity":1,"message":"245","line":34,"column":29,"nodeType":"210","messageId":"211","endLine":34,"endColumn":47},{"ruleId":"208","severity":1,"message":"246","line":108,"column":9,"nodeType":"210","messageId":"211","endLine":108,"endColumn":27},{"ruleId":"208","severity":1,"message":"244","line":7,"column":24,"nodeType":"210","messageId":"211","endLine":7,"endColumn":37},{"ruleId":"208","severity":1,"message":"247","line":8,"column":20,"nodeType":"210","messageId":"211","endLine":8,"endColumn":29},{"ruleId":"208","severity":1,"message":"248","line":9,"column":29,"nodeType":"210","messageId":"211","endLine":9,"endColumn":47},{"ruleId":"208","severity":1,"message":"249","line":10,"column":24,"nodeType":"210","messageId":"211","endLine":10,"endColumn":37},{"ruleId":"208","severity":1,"message":"250","line":11,"column":22,"nodeType":"210","messageId":"211","endLine":11,"endColumn":33},{"ruleId":"208","severity":1,"message":"251","line":19,"column":23,"nodeType":"210","messageId":"211","endLine":19,"endColumn":35},{"ruleId":"208","severity":1,"message":"252","line":20,"column":27,"nodeType":"210","messageId":"211","endLine":20,"endColumn":43},{"ruleId":"208","severity":1,"message":"253","line":41,"column":19,"nodeType":"210","messageId":"211","endLine":41,"endColumn":27},{"ruleId":"208","severity":1,"message":"254","line":44,"column":29,"nodeType":"210","messageId":"211","endLine":44,"endColumn":47},{"ruleId":"208","severity":1,"message":"255","line":47,"column":32,"nodeType":"210","messageId":"211","endLine":47,"endColumn":53},{"ruleId":"208","severity":1,"message":"256","line":50,"column":18,"nodeType":"210","messageId":"211","endLine":50,"endColumn":25},{"ruleId":"208","severity":1,"message":"257","line":51,"column":18,"nodeType":"210","messageId":"211","endLine":51,"endColumn":25},{"ruleId":"214","severity":1,"message":"258","line":68,"column":8,"nodeType":"216","endLine":68,"endColumn":15,"suggestions":"259"},{"ruleId":"208","severity":1,"message":"260","line":70,"column":11,"nodeType":"210","messageId":"211","endLine":70,"endColumn":30},{"ruleId":"208","severity":1,"message":"261","line":75,"column":11,"nodeType":"210","messageId":"211","endLine":75,"endColumn":19},{"ruleId":"208","severity":1,"message":"262","line":81,"column":11,"nodeType":"210","messageId":"211","endLine":81,"endColumn":39},{"ruleId":"208","severity":1,"message":"263","line":120,"column":9,"nodeType":"210","messageId":"211","endLine":120,"endColumn":19},{"ruleId":"208","severity":1,"message":"264","line":121,"column":9,"nodeType":"210","messageId":"211","endLine":121,"endColumn":17},{"ruleId":"208","severity":1,"message":"265","line":122,"column":9,"nodeType":"210","messageId":"211","endLine":122,"endColumn":18},{"ruleId":"208","severity":1,"message":"266","line":123,"column":9,"nodeType":"210","messageId":"211","endLine":123,"endColumn":24},{"ruleId":"208","severity":1,"message":"267","line":124,"column":9,"nodeType":"210","messageId":"211","endLine":124,"endColumn":22},{"ruleId":"208","severity":1,"message":"268","line":125,"column":9,"nodeType":"210","messageId":"211","endLine":125,"endColumn":14},{"ruleId":"208","severity":1,"message":"269","line":133,"column":9,"nodeType":"210","messageId":"211","endLine":133,"endColumn":21},{"ruleId":"208","severity":1,"message":"270","line":134,"column":9,"nodeType":"210","messageId":"211","endLine":134,"endColumn":26},{"ruleId":"208","severity":1,"message":"271","line":1,"column":8,"nodeType":"210","messageId":"211","endLine":1,"endColumn":28},{"ruleId":"208","severity":1,"message":"272","line":5,"column":12,"nodeType":"210","messageId":"211","endLine":5,"endColumn":22},{"ruleId":"208","severity":1,"message":"273","line":5,"column":24,"nodeType":"210","messageId":"211","endLine":5,"endColumn":37},{"ruleId":"274","severity":1,"message":"275","line":4,"column":401,"nodeType":"276","messageId":"277","endLine":4,"endColumn":402,"suggestions":"278"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":482,"nodeType":"276","messageId":"277","endLine":4,"endColumn":483,"suggestions":"279"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":547,"nodeType":"276","messageId":"277","endLine":4,"endColumn":548,"suggestions":"280"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":574,"nodeType":"276","messageId":"277","endLine":4,"endColumn":575,"suggestions":"281"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":595,"nodeType":"276","messageId":"277","endLine":4,"endColumn":596,"suggestions":"282"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":633,"nodeType":"276","messageId":"277","endLine":4,"endColumn":634,"suggestions":"283"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":667,"nodeType":"276","messageId":"277","endLine":4,"endColumn":668,"suggestions":"284"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":736,"nodeType":"276","messageId":"277","endLine":4,"endColumn":737,"suggestions":"285"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":759,"nodeType":"276","messageId":"277","endLine":4,"endColumn":760,"suggestions":"286"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":764,"nodeType":"276","messageId":"277","endLine":4,"endColumn":765,"suggestions":"287"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":802,"nodeType":"276","messageId":"277","endLine":4,"endColumn":803,"suggestions":"288"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":815,"nodeType":"276","messageId":"277","endLine":4,"endColumn":816,"suggestions":"289"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":840,"nodeType":"276","messageId":"277","endLine":4,"endColumn":841,"suggestions":"290"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":849,"nodeType":"276","messageId":"277","endLine":4,"endColumn":850,"suggestions":"291"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":882,"nodeType":"276","messageId":"277","endLine":4,"endColumn":883,"suggestions":"292"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":906,"nodeType":"276","messageId":"277","endLine":4,"endColumn":907,"suggestions":"293"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1010,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1011,"suggestions":"294"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1054,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1055,"suggestions":"295"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1075,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1076,"suggestions":"296"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1117,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1118,"suggestions":"297"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1170,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1171,"suggestions":"298"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1267,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1268,"suggestions":"299"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1352,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1353,"suggestions":"300"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1387,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1388,"suggestions":"301"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1416,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1417,"suggestions":"302"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1422,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1423,"suggestions":"303"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1444,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1445,"suggestions":"304"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1453,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1454,"suggestions":"305"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1527,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1528,"suggestions":"306"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1534,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1535,"suggestions":"307"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1549,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1550,"suggestions":"308"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1573,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1574,"suggestions":"309"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1585,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1586,"suggestions":"310"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1593,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1594,"suggestions":"311"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1643,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1644,"suggestions":"312"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1647,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1648,"suggestions":"313"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1700,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1701,"suggestions":"314"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1706,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1707,"suggestions":"315"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1721,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1722,"suggestions":"316"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1725,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1726,"suggestions":"317"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1747,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1748,"suggestions":"318"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1759,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1760,"suggestions":"319"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1820,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1821,"suggestions":"320"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1878,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1879,"suggestions":"321"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1925,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1926,"suggestions":"322"},{"ruleId":"274","severity":1,"message":"275","line":4,"column":1941,"nodeType":"276","messageId":"277","endLine":4,"endColumn":1942,"suggestions":"323"},"no-native-reassign",["324"],"no-negated-in-lhs",["325"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["324"],["325"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'processCurrencyData'. Either include it or remove the dependency array.","ArrayExpression",["326"],"'setPolygonCountLength' is assigned a value but never used.","'setPolygonCountHeight' is assigned a value but never used.","'setDefaultUnitPolygon' is assigned a value but never used.","'setAxialArray' is assigned a value but never used.","'setCustomizedPolygons' is assigned a value but never used.","'setOrientationX' is assigned a value but never used.","'setOrientationY' is assigned a value but never used.","'setFloatNumFault' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has missing dependencies: 'axialMap', 'defaultUnitPolygon.fillColor', 'defaultUnitPolygon.innerFillColor', 'defaultUnitPolygon.innerPolygonRatio', 'defaultUnitPolygon.strokeColor', 'floatNumFault', 'orientationX', and 'orientationY'. Either include them or remove the dependency array.",["327"],"'defaultUnitPolygon' is assigned a value but never used.","'setEdgeLength' is assigned a value but never used.","'centralTextBlockColor' is assigned a value but never used.","'fillColor' is assigned a value but never used.","'textBlockColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axialMap', 'defaultUnitPolygon.fillColor', 'defaultUnitPolygon.innerFillColor', 'defaultUnitPolygon.innerPolygonRatio', 'defaultUnitPolygon.strokeColor', 'defaultUnitPolygon.text', 'floatNumFault', 'orientationX', and 'orientationY'. Either include them or remove the dependency array.",["328"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'HexagonalDisplayType' is defined but never used.","'setAxialMap' is assigned a value but never used.","'setWidthRatio' is assigned a value but never used.","'setGroupLayoutType' is assigned a value but never used.","'polygonCountHeight' is assigned a value but never used.","'setRadius' is assigned a value but never used.","'setEdgeOffsetRatio' is assigned a value but never used.","'setStartAngle' is assigned a value but never used.","'setNumSides' is assigned a value but never used.","'setCenterAng' is assigned a value but never used.","'setEdgeOffsetLen' is assigned a value but never used.","'setEdges' is assigned a value but never used.","'setGeneratedPoints' is assigned a value but never used.","'setPolygonCoordinates' is assigned a value but never used.","'setXDim' is assigned a value but never used.","'setYDim' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'centerAng', 'edgeOffsetLen', 'edges', 'numSides', 'radius', and 'startAngle'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPolygonCoordinatesInner' needs the current value of 'edges'.",["329"],"'setTextWithFontSize' is assigned a value but never used.","'setColor' is assigned a value but never used.","'setInnerPolygonFullnessRatio' is assigned a value but never used.","'startAngle' is assigned a value but never used.","'numSides' is assigned a value but never used.","'centerAng' is assigned a value but never used.","'generatedPoints' is assigned a value but never used.","'edgeOffsetLen' is assigned a value but never used.","'edges' is assigned a value but never used.","'textFontSize' is assigned a value but never used.","'innerPolygonRatio' is assigned a value but never used.","'RegularConvexPolygon' is defined but never used.","'lineMargin' is assigned a value but never used.","'setLineMargin' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["330","331"],["332","333"],["334","335"],["336","337"],["338","339"],["340","341"],["342","343"],["344","345"],["346","347"],["348","349"],["350","351"],["352","353"],["354","355"],["356","357"],["358","359"],["360","361"],["362","363"],["364","365"],["366","367"],["368","369"],["370","371"],["372","373"],["374","375"],["376","377"],["378","379"],["380","381"],["382","383"],["384","385"],["386","387"],["388","389"],["390","391"],["392","393"],["394","395"],["396","397"],["398","399"],["400","401"],["402","403"],["404","405"],["406","407"],["408","409"],["410","411"],["412","413"],["414","415"],["416","417"],["418","419"],["420","421"],"no-global-assign","no-unsafe-negation",{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"messageId":"430","fix":"431","desc":"432"},{"messageId":"433","fix":"434","desc":"435"},{"messageId":"430","fix":"436","desc":"432"},{"messageId":"433","fix":"437","desc":"435"},{"messageId":"430","fix":"438","desc":"432"},{"messageId":"433","fix":"439","desc":"435"},{"messageId":"430","fix":"440","desc":"432"},{"messageId":"433","fix":"441","desc":"435"},{"messageId":"430","fix":"442","desc":"432"},{"messageId":"433","fix":"443","desc":"435"},{"messageId":"430","fix":"444","desc":"432"},{"messageId":"433","fix":"445","desc":"435"},{"messageId":"430","fix":"446","desc":"432"},{"messageId":"433","fix":"447","desc":"435"},{"messageId":"430","fix":"448","desc":"432"},{"messageId":"433","fix":"449","desc":"435"},{"messageId":"430","fix":"450","desc":"432"},{"messageId":"433","fix":"451","desc":"435"},{"messageId":"430","fix":"452","desc":"432"},{"messageId":"433","fix":"453","desc":"435"},{"messageId":"430","fix":"454","desc":"432"},{"messageId":"433","fix":"455","desc":"435"},{"messageId":"430","fix":"456","desc":"432"},{"messageId":"433","fix":"457","desc":"435"},{"messageId":"430","fix":"458","desc":"432"},{"messageId":"433","fix":"459","desc":"435"},{"messageId":"430","fix":"460","desc":"432"},{"messageId":"433","fix":"461","desc":"435"},{"messageId":"430","fix":"462","desc":"432"},{"messageId":"433","fix":"463","desc":"435"},{"messageId":"430","fix":"464","desc":"432"},{"messageId":"433","fix":"465","desc":"435"},{"messageId":"430","fix":"466","desc":"432"},{"messageId":"433","fix":"467","desc":"435"},{"messageId":"430","fix":"468","desc":"432"},{"messageId":"433","fix":"469","desc":"435"},{"messageId":"430","fix":"470","desc":"432"},{"messageId":"433","fix":"471","desc":"435"},{"messageId":"430","fix":"472","desc":"432"},{"messageId":"433","fix":"473","desc":"435"},{"messageId":"430","fix":"474","desc":"432"},{"messageId":"433","fix":"475","desc":"435"},{"messageId":"430","fix":"476","desc":"432"},{"messageId":"433","fix":"477","desc":"435"},{"messageId":"430","fix":"478","desc":"432"},{"messageId":"433","fix":"479","desc":"435"},{"messageId":"430","fix":"480","desc":"432"},{"messageId":"433","fix":"481","desc":"435"},{"messageId":"430","fix":"482","desc":"432"},{"messageId":"433","fix":"483","desc":"435"},{"messageId":"430","fix":"484","desc":"432"},{"messageId":"433","fix":"485","desc":"435"},{"messageId":"430","fix":"486","desc":"432"},{"messageId":"433","fix":"487","desc":"435"},{"messageId":"430","fix":"488","desc":"432"},{"messageId":"433","fix":"489","desc":"435"},{"messageId":"430","fix":"490","desc":"432"},{"messageId":"433","fix":"491","desc":"435"},{"messageId":"430","fix":"492","desc":"432"},{"messageId":"433","fix":"493","desc":"435"},{"messageId":"430","fix":"494","desc":"432"},{"messageId":"433","fix":"495","desc":"435"},{"messageId":"430","fix":"496","desc":"432"},{"messageId":"433","fix":"497","desc":"435"},{"messageId":"430","fix":"498","desc":"432"},{"messageId":"433","fix":"499","desc":"435"},{"messageId":"430","fix":"500","desc":"432"},{"messageId":"433","fix":"501","desc":"435"},{"messageId":"430","fix":"502","desc":"432"},{"messageId":"433","fix":"503","desc":"435"},{"messageId":"430","fix":"504","desc":"432"},{"messageId":"433","fix":"505","desc":"435"},{"messageId":"430","fix":"506","desc":"432"},{"messageId":"433","fix":"507","desc":"435"},{"messageId":"430","fix":"508","desc":"432"},{"messageId":"433","fix":"509","desc":"435"},{"messageId":"430","fix":"510","desc":"432"},{"messageId":"433","fix":"511","desc":"435"},{"messageId":"430","fix":"512","desc":"432"},{"messageId":"433","fix":"513","desc":"435"},{"messageId":"430","fix":"514","desc":"432"},{"messageId":"433","fix":"515","desc":"435"},{"messageId":"430","fix":"516","desc":"432"},{"messageId":"433","fix":"517","desc":"435"},{"messageId":"430","fix":"518","desc":"432"},{"messageId":"433","fix":"519","desc":"435"},{"messageId":"430","fix":"520","desc":"432"},{"messageId":"433","fix":"521","desc":"435"},{"messageId":"430","fix":"522","desc":"432"},{"messageId":"433","fix":"523","desc":"435"},{"messageId":"430","fix":"524","desc":"432"},{"messageId":"433","fix":"525","desc":"435"},"Update the dependencies array to be: [props, currencyDisplaySource, currencyDisplayDestinations, currencyDisplayType, cachedResponse, processCurrencyData]",{"range":"526","text":"527"},"Update the dependencies array to be: [axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, floatNumFault, orientationX, orientationY, props]",{"range":"528","text":"529"},"Update the dependencies array to be: [axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, defaultUnitPolygon.text, floatNumFault, orientationX, orientationY, props]",{"range":"530","text":"531"},"Update the dependencies array to be: [centerAng, edgeOffsetLen, edges, numSides, props, radius, startAngle]",{"range":"532","text":"533"},"removeEscape",{"range":"534","text":"535"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"536","text":"537"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"538","text":"535"},{"range":"539","text":"537"},{"range":"540","text":"535"},{"range":"541","text":"537"},{"range":"542","text":"535"},{"range":"543","text":"537"},{"range":"544","text":"535"},{"range":"545","text":"537"},{"range":"546","text":"535"},{"range":"547","text":"537"},{"range":"548","text":"535"},{"range":"549","text":"537"},{"range":"550","text":"535"},{"range":"551","text":"537"},{"range":"552","text":"535"},{"range":"553","text":"537"},{"range":"554","text":"535"},{"range":"555","text":"537"},{"range":"556","text":"535"},{"range":"557","text":"537"},{"range":"558","text":"535"},{"range":"559","text":"537"},{"range":"560","text":"535"},{"range":"561","text":"537"},{"range":"562","text":"535"},{"range":"563","text":"537"},{"range":"564","text":"535"},{"range":"565","text":"537"},{"range":"566","text":"535"},{"range":"567","text":"537"},{"range":"568","text":"535"},{"range":"569","text":"537"},{"range":"570","text":"535"},{"range":"571","text":"537"},{"range":"572","text":"535"},{"range":"573","text":"537"},{"range":"574","text":"535"},{"range":"575","text":"537"},{"range":"576","text":"535"},{"range":"577","text":"537"},{"range":"578","text":"535"},{"range":"579","text":"537"},{"range":"580","text":"535"},{"range":"581","text":"537"},{"range":"582","text":"535"},{"range":"583","text":"537"},{"range":"584","text":"535"},{"range":"585","text":"537"},{"range":"586","text":"535"},{"range":"587","text":"537"},{"range":"588","text":"535"},{"range":"589","text":"537"},{"range":"590","text":"535"},{"range":"591","text":"537"},{"range":"592","text":"535"},{"range":"593","text":"537"},{"range":"594","text":"535"},{"range":"595","text":"537"},{"range":"596","text":"535"},{"range":"597","text":"537"},{"range":"598","text":"535"},{"range":"599","text":"537"},{"range":"600","text":"535"},{"range":"601","text":"537"},{"range":"602","text":"535"},{"range":"603","text":"537"},{"range":"604","text":"535"},{"range":"605","text":"537"},{"range":"606","text":"535"},{"range":"607","text":"537"},{"range":"608","text":"535"},{"range":"609","text":"537"},{"range":"610","text":"535"},{"range":"611","text":"537"},{"range":"612","text":"535"},{"range":"613","text":"537"},{"range":"614","text":"535"},{"range":"615","text":"537"},{"range":"616","text":"535"},{"range":"617","text":"537"},{"range":"618","text":"535"},{"range":"619","text":"537"},{"range":"620","text":"535"},{"range":"621","text":"537"},{"range":"622","text":"535"},{"range":"623","text":"537"},{"range":"624","text":"535"},{"range":"625","text":"537"},{"range":"626","text":"535"},{"range":"627","text":"537"},[6475,6571],"[props, currencyDisplaySource, currencyDisplayDestinations, currencyDisplayType, cachedResponse, processCurrencyData]",[5958,5965],"[axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, floatNumFault, orientationX, orientationY, props]",[8882,8889],"[axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, defaultUnitPolygon.text, floatNumFault, orientationX, orientationY, props]",[3040,3047],"[centerAng, edgeOffsetLen, edges, numSides, props, radius, startAngle]",[473,474],"",[473,473],"\\",[554,555],[554,554],[619,620],[619,619],[646,647],[646,646],[667,668],[667,667],[705,706],[705,705],[739,740],[739,739],[808,809],[808,808],[831,832],[831,831],[836,837],[836,836],[874,875],[874,874],[887,888],[887,887],[912,913],[912,912],[921,922],[921,921],[954,955],[954,954],[978,979],[978,978],[1082,1083],[1082,1082],[1126,1127],[1126,1126],[1147,1148],[1147,1147],[1189,1190],[1189,1189],[1242,1243],[1242,1242],[1339,1340],[1339,1339],[1424,1425],[1424,1424],[1459,1460],[1459,1459],[1488,1489],[1488,1488],[1494,1495],[1494,1494],[1516,1517],[1516,1516],[1525,1526],[1525,1525],[1599,1600],[1599,1599],[1606,1607],[1606,1606],[1621,1622],[1621,1621],[1645,1646],[1645,1645],[1657,1658],[1657,1657],[1665,1666],[1665,1665],[1715,1716],[1715,1715],[1719,1720],[1719,1719],[1772,1773],[1772,1772],[1778,1779],[1778,1778],[1793,1794],[1793,1793],[1797,1798],[1797,1797],[1819,1820],[1819,1819],[1831,1832],[1831,1831],[1892,1893],[1892,1892],[1950,1951],[1950,1950],[1997,1998],[1997,1997],[2013,2014],[2013,2013]]