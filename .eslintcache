[{"D:\\workspace\\exchange-ui\\src\\index.js":"1","D:\\workspace\\exchange-ui\\src\\App.js":"2","D:\\workspace\\exchange-ui\\src\\reportWebVitals.js":"3","D:\\workspace\\exchange-ui\\src\\MyFirstElement.js":"4","D:\\workspace\\exchange-ui\\src\\GitHubCards.js":"5","D:\\workspace\\exchange-ui\\src\\CurrencyElement.js":"6","D:\\workspace\\exchange-ui\\src\\HexagonElement.js":"7","D:\\workspace\\exchange-ui\\src\\CurrencyColors.js":"8","D:\\workspace\\exchange-ui\\src\\second_iteration\\TestComptForRegularConvexPolygon.js":"9","D:\\workspace\\exchange-ui\\src\\second_iteration\\HexagonGridUtils.js":"10","D:\\workspace\\exchange-ui\\src\\second_iteration\\ColorUtil.js":"11","D:\\workspace\\exchange-ui\\src\\second_iteration\\RegularConvexPolygon.js":"12","D:\\workspace\\exchange-ui\\src\\second_iteration\\PolygonUtil.js":"13","D:\\workspace\\exchange-ui\\src\\second_iteration\\TestCompForPolygonGroup.js":"14","D:\\workspace\\exchange-ui\\src\\second_iteration\\PolygonGroup.js":"15","D:\\workspace\\exchange-ui\\src\\second_iteration\\TestCompForRadialCurrencyDisplay.js":"16","D:\\workspace\\exchange-ui\\src\\second_iteration\\NumberFormattingUtil.js":"17","D:\\workspace\\exchange-ui\\src\\second_iteration\\CurrencyMultipleSearchSelection.js":"18","D:\\workspace\\exchange-ui\\src\\second_iteration\\CurrencySearchSelection.js":"19","D:\\workspace\\exchange-ui\\src\\second_iteration\\CurrencyGridDisplay.js":"20","D:\\workspace\\exchange-ui\\src\\second_iteration\\CurrencyManager.js":"21"},{"size":826,"mtime":1613244633867,"results":"22","hashOfConfig":"23"},{"size":815,"mtime":1606335366352,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":904,"mtime":1606335326692,"results":"26","hashOfConfig":"23"},{"size":2326,"mtime":1608236532088,"results":"27","hashOfConfig":"23"},{"size":831,"mtime":1608616994339,"results":"28","hashOfConfig":"23"},{"size":15137,"mtime":1612899629989,"results":"29","hashOfConfig":"23"},{"size":11168,"mtime":1613333901061,"results":"30","hashOfConfig":"23"},{"size":1983,"mtime":1612726294906,"results":"31","hashOfConfig":"23"},{"size":3211,"mtime":1613289550874,"results":"32","hashOfConfig":"23"},{"size":572,"mtime":1612640494149,"results":"33","hashOfConfig":"23"},{"size":5730,"mtime":1613069940947,"results":"34","hashOfConfig":"23"},{"size":2735,"mtime":1612986665275,"results":"35","hashOfConfig":"23"},{"size":841,"mtime":1612867179514,"results":"36","hashOfConfig":"23"},{"size":3006,"mtime":1612989018490,"results":"37","hashOfConfig":"23"},{"size":796,"mtime":1613162182998,"results":"38","hashOfConfig":"23"},{"size":893,"mtime":1613073106422,"results":"39","hashOfConfig":"23"},{"size":1012,"mtime":1613332583613,"results":"40","hashOfConfig":"23"},{"size":618,"mtime":1613249265336,"results":"41","hashOfConfig":"23"},{"size":7063,"mtime":1613335317357,"results":"42","hashOfConfig":"23"},{"size":5931,"mtime":1613334423990,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"jvmnhy",{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"47"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"47"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"47"},"D:\\workspace\\exchange-ui\\src\\index.js",["96","97"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './demo.css'\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport CurrencyMultipleSearchSelection from \"./second_iteration/CurrencyMultipleSearchSelection\";\r\nimport CurrencySearchSelection from \"./second_iteration/CurrencySearchSelection\";\r\nimport CurrencyManager from \"./second_iteration/CurrencyManager\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <CurrencyManager/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["98","99"],"D:\\workspace\\exchange-ui\\src\\App.js",["100"],"import logo from './logo.svg';\nimport './App.css';\nimport React, {useState} from \"react\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <Hello/>\n                <p>Hello React!</p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nfunction Hello() {\n    return <div>Hello func!</div>\n}\n\nexport default App;\n",["101","102"],"D:\\workspace\\exchange-ui\\src\\reportWebVitals.js",[],"D:\\workspace\\exchange-ui\\src\\MyFirstElement.js",[],"D:\\workspace\\exchange-ui\\src\\GitHubCards.js",["103"],"import React from \"react\";\r\nimport './GitHubCards.css';\r\nimport axios from 'axios';\r\n\r\n/*\r\n* These URL does not give any CORS error on a Google cloud app, why? */\r\n\r\nconst testData = [\r\n    {name: \"Dan Abramov\", avatar_url: \"https://avatars0.githubusercontent.com/u/810438?v=4\", company: \"@facebook\"},\r\n    {name: \"Sophie Alpert\", avatar_url: \"https://avatars2.githubusercontent.com/u/6820?v=4\", company: \"Humu\"},\r\n    {name: \"Sebastian MarkbÃ¥ge\", avatar_url: \"https://avatars2.githubusercontent.com/u/63648?v=4\", company: \"Facebook\"},\r\n];\r\n\r\nconst CardList = (props) => (\r\n    <div>\r\n        {props.profiles.map(profile => <Card {...profile}/>)}\r\n    </div>\r\n);\r\n\r\nclass Form extends React.Component {\r\n    state = {userName: ''};\r\n    handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const resp = await axios.get(`https://api.github.com/users/${this.state.userName}`);\r\n        this.props.onSubmit(resp.data);\r\n    };\r\n    render() {\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={this.state.userName}\r\n                    onChange={event => this.setState({userName: event.target.value})}\r\n                    placeholder=\"GitHub username\"\r\n                    required\r\n                />\r\n                <button>Add card</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nclass Card extends React.Component {\r\n    render() {\r\n        const profile = this.props;\r\n        return (\r\n            <div className=\"github-profile\">\r\n                <img src={profile.avatar_url}/>\r\n                <div className=\"info\">\r\n                    <div className=\"name\">{profile.name}</div>\r\n                    <div className=\"company\">{profile.company}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Container extends React.Component {\r\n    state = {\r\n        profiles: testData\r\n    };\r\n    addNewProfile = (profileData) => {\r\n        this.setState(prevState => ({profiles: [...prevState.profiles,profileData]}));\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form onSubmit={this.addNewProfile}/>\r\n                <CardList profiles={this.state.profiles}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Container;","D:\\workspace\\exchange-ui\\src\\CurrencyElement.js",[],"D:\\workspace\\exchange-ui\\src\\HexagonElement.js",[],"D:\\workspace\\exchange-ui\\src\\CurrencyColors.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\TestComptForRegularConvexPolygon.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\HexagonGridUtils.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\ColorUtil.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\RegularConvexPolygon.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"import React, {useEffect, useState} from 'react'\r\nimport PolygonUtils from \"./PolygonUtil\";\r\n\r\nconst useRegularConvexPolygon = (props) => {\r\n\r\n    const [widthRatio, setWidthRatio] = useState(props.widthRatio);\r\n    const [radius, setRadius] = useState(30);\r\n    const [edgeOffsetRatio, setEdgeOffsetRatio] = useState(props.edgeOffsetRatio);\r\n    const [startAngle, setStartAngle] = useState(props.startAngle);\r\n    const [numSides, setNumSides] = useState(props.numSides);\r\n    const [fillColor, setFillColor] = useState(props.fillColor);\r\n    const [strokeColor, setStrokeColor] = useState(props.strokeColor);\r\n    const [text, setText] = useState(props.text);\r\n    const [textFontSize, setTextFontSize] = useState(props.textFontSize);\r\n    const [innerPolygonRatio, setInnerPolygonRatio] = useState(props.innerPolygonRatio);\r\n    const [innerFillColor, setInnerFillColor] = useState(props.innerFillColor);\r\n\r\n    const [centerAng, setCenterAng] = useState(2 * Math.PI / numSides);\r\n    const [edgeOffsetLen, setEdgeOffsetLen] = useState(radius * edgeOffsetRatio / 2);\r\n\r\n    const tempGeneratedPoints = PolygonUtils.generatePoints(\r\n        numSides,\r\n        radius,\r\n        centerAng,\r\n        startAngle);\r\n\r\n    let generatedPointsOuter = PolygonUtils.generatePoints(\r\n        numSides,\r\n        radius + edgeOffsetLen,\r\n        centerAng,\r\n        startAngle);\r\n\r\n    const tempGeneratedPointsInner = PolygonUtils.generatePoints(\r\n        numSides,\r\n        (radius + edgeOffsetLen) * innerPolygonRatio,\r\n        centerAng,\r\n        startAngle);\r\n\r\n\r\n    const [edges, setEdges] = useState(PolygonUtils.getEdgePoints(generatedPointsOuter));\r\n    let dimensions = PolygonUtils.getDimensions(edges);\r\n\r\n    const [generatedPoints, setGeneratedPoints] = useState(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPoints, edges));\r\n    const [generatedPointsInner, setGeneratedPointsInner] = useState(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPointsInner, edges));\r\n\r\n    const [polygonCoordinates, setPolygonCoordinates] = useState(generatedPoints.map(pair => pair.join(',')).join(' '));\r\n    const [polygonCoordinatesInner, setPolygonCoordinatesInner] = useState(generatedPointsInner.map(pair => pair.join(',')).join(' '));\r\n\r\n    const [xDim, setXDim] = useState(dimensions.xDim);\r\n    const [yDim, setYDim] = useState(dimensions.yDim);\r\n\r\n    useEffect(() => {\r\n        setFillColor(props.fillColor);\r\n        setStrokeColor(props.strokeColor);\r\n        setInnerFillColor(props.innerFillColor);\r\n        setInnerPolygonRatio(props.innerPolygonRatio);\r\n        setText(props.text);\r\n        setTextFontSize(props.textFontSize);\r\n\r\n        const tempGeneratedPointsInner = PolygonUtils.generatePoints(\r\n            numSides,\r\n            (radius + edgeOffsetLen) * props.innerPolygonRatio,\r\n            centerAng,\r\n            startAngle);\r\n        setPolygonCoordinatesInner(PolygonUtils.getShiftedPositiveQuadrant(tempGeneratedPointsInner, edges));\r\n\r\n    }, [props]);\r\n\r\n    const setTextWithFontSize = (text, textFontSize) => {\r\n        setText(text);\r\n        setTextFontSize(textFontSize);\r\n    }\r\n\r\n    const setColor = (fillColor, strokeColor, innerFillColor) => {\r\n        setFillColor(fillColor);\r\n        setStrokeColor(strokeColor);\r\n        setInnerFillColor(innerFillColor);\r\n    }\r\n\r\n    const setInnerPolygonFullnessRatio = (ratio) => {\r\n        let generatedPointsInner = PolygonUtils.generatePoints(\r\n            numSides,\r\n            (radius + edgeOffsetLen) * ratio,\r\n            centerAng,\r\n            startAngle);\r\n        generatedPointsInner = PolygonUtils.getShiftedPositiveQuadrant(generatedPointsInner, edges);\r\n        let polygonCoordinatesInner = generatedPointsInner.map(pair => pair.join(',')).join(' ');\r\n        setGeneratedPointsInner(generatedPointsInner);\r\n        setInnerPolygonRatio(ratio);\r\n        setPolygonCoordinatesInner(polygonCoordinatesInner);\r\n    }\r\n\r\n    return {\r\n        widthRatio,\r\n        edgeOffsetRatio,\r\n        startAngle,\r\n        numSides,\r\n        centerAng,\r\n        generatedPoints,\r\n        edgeOffsetLen,\r\n        edges,\r\n        xDim,\r\n        yDim,\r\n        polygonCoordinates,\r\n        polygonCoordinatesInner,\r\n        fillColor,\r\n        strokeColor,\r\n        text,\r\n        textFontSize,\r\n        innerPolygonRatio,\r\n        innerFillColor,\r\n    };\r\n}\r\n\r\nconst RegularConvexPolygon = (props) => {\r\n    const {\r\n        widthRatio,\r\n        edgeOffsetRatio,\r\n        startAngle,\r\n        numSides,\r\n        centerAng,\r\n        generatedPoints,\r\n        edgeOffsetLen,\r\n        edges,\r\n        xDim,\r\n        yDim,\r\n        polygonCoordinates,\r\n        polygonCoordinatesInner,\r\n        fillColor,\r\n        strokeColor,\r\n        text,\r\n        textFontSize,\r\n        innerPolygonRatio,\r\n        innerFillColor,\r\n    } = useRegularConvexPolygon(props);\r\n\r\n    return (\r\n        <svg\r\n            width={(widthRatio * 100) + \"%\"}\r\n            viewBox={\"0 0 \" + xDim + \" \" + yDim}\r\n            style={{verticalAlign: 'top'}}\r\n        >\r\n            <polygon points={polygonCoordinates} style={{\r\n                fill: fillColor,\r\n                stroke: strokeColor,\r\n                strokeWidth: (100 * edgeOffsetRatio) + \"%\",\r\n                verticalAlign: 'top'\r\n            }}/>\r\n            <polygon points={polygonCoordinatesInner} style={{\r\n                fill: innerFillColor,\r\n                verticalAlign: 'top'\r\n            }}/>\r\n            <text x=\"50%\" y=\"57%\" style={{whiteSpace: \"pre-line\"}} textAnchor=\"middle\" fontFamily=\"Arial\"\r\n                  fill=\"black\" fontSize={textFontSize} fontWeight=\"normal\">\r\n                {text}\r\n            </text>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default RegularConvexPolygon;",["127","128"],"D:\\workspace\\exchange-ui\\src\\second_iteration\\PolygonUtil.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\TestCompForPolygonGroup.js",["129"],"D:\\workspace\\exchange-ui\\src\\second_iteration\\PolygonGroup.js",["130","131","132","133","134","135"],"import RegularConvexPolygon from \"./RegularConvexPolygon\";\r\nimport React, {useState} from \"react\";\r\n\r\nconst usePolygonGroup = (props) => {\r\n\r\n    let length = props.polygonCountLength;\r\n    let height = props.polygonCountHeight;\r\n    length = length % 2 === 1 ? length : length + 1;\r\n    height = height % 2 === 1 ? height : height + 1;\r\n\r\n    const [polygonCountLength, setPolygonCountLength] = useState(length);\r\n    const [polygonCountHeight, setPolygonCountHeight] = useState(height);\r\n\r\n    const [axialArray, setAxialArray] = useState(props.axialArray);\r\n    const [axialMap, setAxialMap] = useState(props.axialMap);\r\n\r\n    const[widthRatio, setWidthRatio] = useState(1 / polygonCountLength);\r\n\r\n    return {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        axialArray,\r\n        axialMap,\r\n        widthRatio\r\n    };\r\n}\r\n\r\nconst PolygonGroup = (props) => {\r\n    const {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        axialArray,\r\n        axialMap,\r\n        widthRatio,\r\n    } = usePolygonGroup(props);\r\n\r\n    const horizontalMargin = (1 / ((polygonCountLength * 2) + 1)) * 100;\r\n    const verticalMargin = horizontalMargin / Math.sqrt(3)\r\n\r\n    return (\r\n        <div style={{\r\n            width: \"80%\",\r\n            overflowX: \"auto\",\r\n            overflowY: \"auto\",\r\n            margin: \"0 auto\"\r\n        }}>\r\n            {\r\n                axialArray.map((row, index) => {\r\n\r\n                        let dynamicStyle = {};\r\n                        if (axialArray.length === index + 1) {\r\n                            dynamicStyle = {\r\n                                marginRight: horizontalMargin + \"%\",\r\n                            };\r\n                        } else if (index % 2 === 0) {\r\n                            if (index === 0) {\r\n                                dynamicStyle = {\r\n                                    marginRight: horizontalMargin + \"%\",\r\n                                    marginBottom: \"-\" + verticalMargin + \"%\",\r\n                                };\r\n                            } else {\r\n                                dynamicStyle = {\r\n                                    marginRight: horizontalMargin + \"%\",\r\n                                    marginBottom: \"-\" + verticalMargin + \"%\",\r\n                                };\r\n                            }\r\n                        } else {\r\n\r\n                            dynamicStyle = {\r\n                                marginLeft: horizontalMargin + \"%\",\r\n                                marginBottom: \"-\" + verticalMargin + \"%\",\r\n                            };\r\n\r\n                        }\r\n                        return <div\r\n                            style={dynamicStyle}>{\r\n                            row.map((element) => <RegularConvexPolygon widthRatio={widthRatio} {...axialMap[element]}\r\n                            />)\r\n                        }</div>\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default PolygonGroup;","D:\\workspace\\exchange-ui\\src\\second_iteration\\TestCompForRadialCurrencyDisplay.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\NumberFormattingUtil.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\CurrencyMultipleSearchSelection.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\CurrencySearchSelection.js",[],"D:\\workspace\\exchange-ui\\src\\second_iteration\\CurrencyGridDisplay.js",["136","137","138","139","140","141","142","143","144","145","146","147"],"import PolygonGroup from \"./PolygonGroup\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {ClockwiseHexagonDirections, Directions, getOrientations} from \"./PolygonUtil\";\r\nimport {currencyColors} from \"../CurrencyColors\";\r\nimport {centeredHexagonPolygonGrid, getRadialExpansionLimit, getRadialExpansionSequence} from \"./HexagonGridUtils\";\r\nimport {getDiagonalStepValue, largeNumberFormatter} from \"./NumberFormattingUtil\";\r\nimport {LightenDarkenColor} from \"./ColorUtil\";\r\n\r\nconst useCurrencyGridDisplay = (props) => {\r\n    const [polygonCountLength, setPolygonCountLength] = useState(props.polygonCountLength);\r\n    const [polygonCountHeight, setPolygonCountHeight] = useState(props.polygonCountHeight);\r\n    const [defaultUnitPolygon, setDefaultUnitPolygon] = useState(props.defaultUnitPolygon);\r\n\r\n    let {tempAxialArray, tempAxialMap} = centeredHexagonPolygonGrid(polygonCountLength, polygonCountHeight, defaultUnitPolygon);\r\n\r\n    const [axialArray, setAxialArray] = useState(tempAxialArray);\r\n    const [axialMap, setAxialMap] = useState(tempAxialMap);\r\n\r\n    const [customizedPolygons, setCustomizedPolygons] = useState([]);\r\n    const [orientationX, setOrientationX] = useState(0);\r\n    const [orientationY, setOrientationY] = useState(0);\r\n    const [floatNumFault, setFloatNumFault] = useState(2);\r\n\r\n    function prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap) {\r\n        let centralTextBlockColor = currencyColors[sourceCurrencyEntity].color;\r\n        let centerPolygonCoordinate = startPoints[Directions.CENTER].x + \",\" + startPoints[Directions.CENTER].y;\r\n        clonedAxialMap[centerPolygonCoordinate].fillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].strokeColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].innerFillColor = centralTextBlockColor;\r\n        clonedAxialMap[centerPolygonCoordinate].text = sourceCurrencyEntity;\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let currencyVisualizationData = props.currencyVisualizationData;\r\n\r\n        let type = currencyVisualizationData.type;\r\n        let sourceCurrencyEntity = currencyVisualizationData.sourceCurrency.entity;\r\n        let destinationCurrencies = currencyVisualizationData.destinationCurrencies;\r\n\r\n        if (sourceCurrencyEntity === \"\") {\r\n            return;\r\n        }\r\n        let clonedAxialMap = {...axialMap};\r\n\r\n        let startPoints = getOrientations(orientationX, orientationY);\r\n\r\n        prepareCenterPolygon(sourceCurrencyEntity, startPoints, clonedAxialMap);\r\n\r\n\r\n        if (type === \"radial\") {\r\n            destinationCurrencies.forEach((currency, index) => {\r\n                let direction = ClockwiseHexagonDirections[index];\r\n                let polygonCoordinateSequence = getRadialExpansionSequence(startPoints[direction].x, startPoints[direction].y, direction);\r\n                let displayValue = currency.value;\r\n                let stepValue = getDiagonalStepValue(displayValue, floatNumFault);\r\n\r\n                let currencyText = currency.entity;\r\n                let fillColor = '#ffffff';\r\n                let strokeColor = LightenDarkenColor(currencyColors[currency.entity].color, -20);\r\n                let innerFillColor = currencyColors[currency.entity].color;\r\n                let textBlockColor = LightenDarkenColor(innerFillColor, 30);\r\n\r\n                let sum = 0;\r\n                polygonCoordinateSequence.forEach((polygonCoordinate, index) => {\r\n                    if (index === 0) {\r\n                        clonedAxialMap[polygonCoordinate].textFontSize = 15;\r\n                        clonedAxialMap[polygonCoordinate].text = currencyText;\r\n                        clonedAxialMap[polygonCoordinate].fillColor = textBlockColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = textBlockColor;\r\n                    } else if (displayValue !== 0) {\r\n                        if (displayValue < stepValue) {\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum + displayValue);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = fillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            let innerPolygonRatio = displayValue / stepValue;\r\n                            clonedAxialMap[polygonCoordinate].innerPolygonRatio = innerPolygonRatio;\r\n                            displayValue = 0;\r\n                        } else {\r\n                            sum += stepValue;\r\n                            clonedAxialMap[polygonCoordinate].text = largeNumberFormatter(sum);\r\n                            clonedAxialMap[polygonCoordinate].fillColor = innerFillColor;\r\n                            clonedAxialMap[polygonCoordinate].strokeColor = strokeColor;\r\n                            clonedAxialMap[polygonCoordinate].innerFillColor = innerFillColor;\r\n                            displayValue -= stepValue;\r\n                        }\r\n                    } else {\r\n                        clonedAxialMap[polygonCoordinate].text = \"\";\r\n                        clonedAxialMap[polygonCoordinate].fillColor = defaultUnitPolygon.fillColor;\r\n                        clonedAxialMap[polygonCoordinate].strokeColor = defaultUnitPolygon.strokeColor;\r\n                        clonedAxialMap[polygonCoordinate].innerFillColor = defaultUnitPolygon.innerFillColor;\r\n                        clonedAxialMap[polygonCoordinate].innerPolygonRatio = defaultUnitPolygon.innerPolygonRatio;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        setAxialMap(clonedAxialMap);\r\n\r\n    }, [props]);\r\n    return {polygonCountLength, polygonCountHeight, defaultUnitPolygon, customizedPolygons, axialArray, axialMap};\r\n}\r\n\r\nconst CurrencyGridDisplay = (props) => {\r\n    const {\r\n        polygonCountLength,\r\n        polygonCountHeight,\r\n        defaultUnitPolygon,\r\n        customizedPolygons,\r\n        axialArray,\r\n        axialMap,\r\n    } = useCurrencyGridDisplay(props);\r\n\r\n\r\n    return (\r\n        <>\r\n            <PolygonGroup\r\n                polygonCountLength={polygonCountLength}\r\n                polygonCountHeight={polygonCountHeight}\r\n                customizedPolygons={customizedPolygons}\r\n                axialArray={axialArray}\r\n                axialMap={axialMap}\r\n                defaultUnitPolygon={{\r\n                    edgeOffsetRatio: 0.036,\r\n                    startAngle: 90,\r\n                    numSides: 6,\r\n                    fillColor: '#ffffff',\r\n                    strokeColor: '#000000',\r\n                    text: \"\",\r\n                    textFontSize: 14,\r\n                    innerPolygonRatio: 0.0,\r\n                    innerFillColor: \"\",\r\n                }}\r\n            />\r\n        </>\r\n    );\r\n\r\n}\r\nexport default CurrencyGridDisplay;","D:\\workspace\\exchange-ui\\src\\second_iteration\\CurrencyManager.js",["148","149","150"],"import CurrencyGridDisplay from \"./CurrencyGridDisplay\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport CurrencySearchSelection from \"./CurrencySearchSelection\";\r\nimport CurrencyMultipleSearchSelection from \"./CurrencyMultipleSearchSelection\";\r\nimport {Dropdown} from \"semantic-ui-react\";\r\n\r\nconst useCurrencyManager = (props) => {\r\n    const [currencyDisplayType, setCurrencyDisplayType] = useState(\"radial\");\r\n\r\n    const [currencyDisplaySource, setCurrencyDisplaySource] = useState(\"TRY\");\r\n    const [currencyDisplayDestinations, setCurrencyDisplayDestinations] = useState([\"USD\", \"EUR\", \"GBP\", \"CAD\", \"ETH\", \"BTC\"]);\r\n    const [currencyVisualizationData, setCurrencyVisualizationData] = useState({\r\n        type: currencyDisplayType,\r\n        sourceCurrency: {entity: currencyDisplaySource},\r\n        destinationCurrencies: []\r\n    });\r\n\r\n    const [selectableCurrencyPool, setSelectableCurrencyPool] = useState([]);\r\n\r\n    function formatEmptyCurrenySlots(targetDestinationCurrencies, currencyVisualizationData) {\r\n        let i = 0;\r\n        for (i = targetDestinationCurrencies.length; i < 6; i++) {\r\n            currencyVisualizationData.destinationCurrencies.push({\r\n                entity: \"EMPTY\",\r\n                value: 0.0\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchCurrencyData() {\r\n            axios.get(`http://localhost:8080/currency`).then(response => {\r\n\r\n                let responseBaseCurrency = response.data.base;\r\n                let responseRateMap = {};\r\n                let responseCurrencyPool = [];\r\n                response.data.rates.forEach(rate => {\r\n                    responseRateMap[rate.entity] = rate;\r\n                    responseCurrencyPool.push({key: rate.entity, text: rate.entity, value: rate.entity});\r\n                });\r\n\r\n                setSelectableCurrencyPool(responseCurrencyPool)\r\n\r\n                let targetSourceCurrency = currencyDisplaySource;\r\n                let targetDestinationCurrencies = currencyDisplayDestinations;\r\n\r\n                let currencyVisualizationData = {type: \"\", sourceCurrency: {entity: \"\"}, destinationCurrencies: []};\r\n                currencyVisualizationData.type = currencyDisplayType;\r\n                if (targetSourceCurrency === responseBaseCurrency) {\r\n                    currencyVisualizationData.sourceCurrency.entity = targetSourceCurrency;\r\n\r\n                    targetDestinationCurrencies.forEach((value, index, array) => {\r\n                        currencyVisualizationData.destinationCurrencies.push({\r\n                            entity: responseRateMap[value].entity,\r\n                            value: responseRateMap[value].value\r\n                        });\r\n                    });\r\n\r\n                    formatEmptyCurrenySlots(targetDestinationCurrencies, currencyVisualizationData);\r\n\r\n                } else if (targetSourceCurrency in responseRateMap) {\r\n                    currencyVisualizationData.sourceCurrency.entity = targetSourceCurrency;\r\n\r\n                    let convertedRateMap = {};\r\n                    let divider = responseRateMap[targetSourceCurrency].value;\r\n                    response.data.rates.forEach(rate => {\r\n                        convertedRateMap[rate.entity] = rate;\r\n                        convertedRateMap[rate.entity].value = convertedRateMap[rate.entity].value / divider;\r\n                    });\r\n                    currencyVisualizationData.sourceCurrency.entity = targetSourceCurrency;\r\n\r\n                    targetDestinationCurrencies.forEach((value, index, array) => {\r\n                        currencyVisualizationData.destinationCurrencies.push({\r\n                            entity: convertedRateMap[value].entity,\r\n                            value: convertedRateMap[value].value\r\n                        });\r\n                    });\r\n\r\n                    formatEmptyCurrenySlots(targetDestinationCurrencies, currencyVisualizationData);\r\n\r\n\r\n                }\r\n                setCurrencyVisualizationData(currencyVisualizationData);\r\n            });\r\n        }\r\n\r\n        fetchCurrencyData();\r\n    }, [props, currencyDisplaySource, currencyDisplayDestinations]);\r\n    return {\r\n        currencyVisualizationData,\r\n        selectableCurrencyPool,\r\n        currencyDisplaySource,\r\n        setCurrencyDisplaySource,\r\n        currencyDisplayDestinations,\r\n        setCurrencyDisplayDestinations\r\n    };\r\n}\r\n\r\nconst CurrencyManager = (props) => {\r\n    const {\r\n        currencyVisualizationData,\r\n        selectableCurrencyPool,\r\n        currencyDisplaySource,\r\n        setCurrencyDisplaySource,\r\n        currencyDisplayDestinations,\r\n        setCurrencyDisplayDestinations\r\n    } = useCurrencyManager(props);\r\n    return (\r\n        <>\r\n            <CurrencyGridDisplay\r\n                currencyVisualizationData={currencyVisualizationData}\r\n                polygonCountLength={13}\r\n                polygonCountHeight={13}\r\n                defaultUnitPolygon={{\r\n                    edgeOffsetRatio: 0.036,\r\n                    startAngle: 90,\r\n                    numSides: 6,\r\n                    fillColor: '#ffffff',\r\n                    strokeColor: '#777777',\r\n                    text: \"\",\r\n                    textFontSize: 14,\r\n                    innerPolygonRatio: 0.0,\r\n                    innerFillColor: \"\",\r\n                }}\r\n            />\r\n            <CurrencySearchSelection setValue={setCurrencyDisplaySource}\r\n                                     options={selectableCurrencyPool}\r\n                                     value={currencyDisplaySource}/>\r\n            <CurrencyMultipleSearchSelection setValue={setCurrencyDisplayDestinations}\r\n                                             options={selectableCurrencyPool}\r\n                                             value={currencyDisplayDestinations}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CurrencyManager;",{"ruleId":"151","severity":1,"message":"152","line":7,"column":8,"nodeType":"153","messageId":"154","endLine":7,"endColumn":39},{"ruleId":"151","severity":1,"message":"155","line":8,"column":8,"nodeType":"153","messageId":"154","endLine":8,"endColumn":31},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"151","severity":1,"message":"160","line":3,"column":16,"nodeType":"153","messageId":"154","endLine":3,"endColumn":24},{"ruleId":"156","replacedBy":"161"},{"ruleId":"158","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":48,"column":17,"nodeType":"165","endLine":48,"endColumn":48},{"ruleId":"151","severity":1,"message":"166","line":6,"column":24,"nodeType":"153","messageId":"154","endLine":6,"endColumn":37},{"ruleId":"151","severity":1,"message":"167","line":7,"column":20,"nodeType":"153","messageId":"154","endLine":7,"endColumn":29},{"ruleId":"151","severity":1,"message":"168","line":8,"column":29,"nodeType":"153","messageId":"154","endLine":8,"endColumn":47},{"ruleId":"151","severity":1,"message":"169","line":9,"column":24,"nodeType":"153","messageId":"154","endLine":9,"endColumn":37},{"ruleId":"151","severity":1,"message":"170","line":10,"column":22,"nodeType":"153","messageId":"154","endLine":10,"endColumn":33},{"ruleId":"151","severity":1,"message":"171","line":18,"column":23,"nodeType":"153","messageId":"154","endLine":18,"endColumn":35},{"ruleId":"151","severity":1,"message":"172","line":19,"column":27,"nodeType":"153","messageId":"154","endLine":19,"endColumn":43},{"ruleId":"151","severity":1,"message":"173","line":40,"column":19,"nodeType":"153","messageId":"154","endLine":40,"endColumn":27},{"ruleId":"151","severity":1,"message":"174","line":43,"column":29,"nodeType":"153","messageId":"154","endLine":43,"endColumn":47},{"ruleId":"151","severity":1,"message":"175","line":46,"column":32,"nodeType":"153","messageId":"154","endLine":46,"endColumn":53},{"ruleId":"151","severity":1,"message":"176","line":49,"column":18,"nodeType":"153","messageId":"154","endLine":49,"endColumn":25},{"ruleId":"151","severity":1,"message":"177","line":50,"column":18,"nodeType":"153","messageId":"154","endLine":50,"endColumn":25},{"ruleId":"178","severity":1,"message":"179","line":67,"column":8,"nodeType":"180","endLine":67,"endColumn":15,"suggestions":"181"},{"ruleId":"151","severity":1,"message":"182","line":69,"column":11,"nodeType":"153","messageId":"154","endLine":69,"endColumn":30},{"ruleId":"151","severity":1,"message":"183","line":74,"column":11,"nodeType":"153","messageId":"154","endLine":74,"endColumn":19},{"ruleId":"151","severity":1,"message":"184","line":80,"column":11,"nodeType":"153","messageId":"154","endLine":80,"endColumn":39},{"ruleId":"151","severity":1,"message":"185","line":119,"column":9,"nodeType":"153","messageId":"154","endLine":119,"endColumn":19},{"ruleId":"151","severity":1,"message":"186","line":120,"column":9,"nodeType":"153","messageId":"154","endLine":120,"endColumn":17},{"ruleId":"151","severity":1,"message":"187","line":121,"column":9,"nodeType":"153","messageId":"154","endLine":121,"endColumn":18},{"ruleId":"151","severity":1,"message":"188","line":122,"column":9,"nodeType":"153","messageId":"154","endLine":122,"endColumn":24},{"ruleId":"151","severity":1,"message":"189","line":123,"column":9,"nodeType":"153","messageId":"154","endLine":123,"endColumn":22},{"ruleId":"151","severity":1,"message":"190","line":124,"column":9,"nodeType":"153","messageId":"154","endLine":124,"endColumn":14},{"ruleId":"151","severity":1,"message":"191","line":133,"column":9,"nodeType":"153","messageId":"154","endLine":133,"endColumn":26},{"ruleId":"156","replacedBy":"192"},{"ruleId":"158","replacedBy":"193"},{"ruleId":"151","severity":1,"message":"194","line":3,"column":8,"nodeType":"153","messageId":"154","endLine":3,"endColumn":40},{"ruleId":"151","severity":1,"message":"195","line":11,"column":32,"nodeType":"153","messageId":"154","endLine":11,"endColumn":53},{"ruleId":"151","severity":1,"message":"196","line":12,"column":32,"nodeType":"153","messageId":"154","endLine":12,"endColumn":53},{"ruleId":"151","severity":1,"message":"197","line":14,"column":24,"nodeType":"153","messageId":"154","endLine":14,"endColumn":37},{"ruleId":"151","severity":1,"message":"198","line":15,"column":22,"nodeType":"153","messageId":"154","endLine":15,"endColumn":33},{"ruleId":"151","severity":1,"message":"166","line":17,"column":23,"nodeType":"153","messageId":"154","endLine":17,"endColumn":36},{"ruleId":"151","severity":1,"message":"199","line":31,"column":9,"nodeType":"153","messageId":"154","endLine":31,"endColumn":27},{"ruleId":"151","severity":1,"message":"200","line":3,"column":8,"nodeType":"153","messageId":"154","endLine":3,"endColumn":13},{"ruleId":"151","severity":1,"message":"201","line":6,"column":37,"nodeType":"153","messageId":"154","endLine":6,"endColumn":60},{"ruleId":"151","severity":1,"message":"195","line":11,"column":32,"nodeType":"153","messageId":"154","endLine":11,"endColumn":53},{"ruleId":"151","severity":1,"message":"196","line":12,"column":32,"nodeType":"153","messageId":"154","endLine":12,"endColumn":53},{"ruleId":"151","severity":1,"message":"202","line":13,"column":32,"nodeType":"153","messageId":"154","endLine":13,"endColumn":53},{"ruleId":"151","severity":1,"message":"197","line":17,"column":24,"nodeType":"153","messageId":"154","endLine":17,"endColumn":37},{"ruleId":"151","severity":1,"message":"203","line":20,"column":32,"nodeType":"153","messageId":"154","endLine":20,"endColumn":53},{"ruleId":"151","severity":1,"message":"204","line":21,"column":26,"nodeType":"153","messageId":"154","endLine":21,"endColumn":41},{"ruleId":"151","severity":1,"message":"205","line":22,"column":26,"nodeType":"153","messageId":"154","endLine":22,"endColumn":41},{"ruleId":"151","severity":1,"message":"206","line":23,"column":27,"nodeType":"153","messageId":"154","endLine":23,"endColumn":43},{"ruleId":"178","severity":1,"message":"207","line":102,"column":8,"nodeType":"180","endLine":102,"endColumn":15,"suggestions":"208"},{"ruleId":"151","severity":1,"message":"209","line":110,"column":9,"nodeType":"153","messageId":"154","endLine":110,"endColumn":27},{"ruleId":"151","severity":1,"message":"210","line":6,"column":9,"nodeType":"153","messageId":"154","endLine":6,"endColumn":17},{"ruleId":"151","severity":1,"message":"211","line":9,"column":33,"nodeType":"153","messageId":"154","endLine":9,"endColumn":55},{"ruleId":"178","severity":1,"message":"212","line":89,"column":8,"nodeType":"180","endLine":89,"endColumn":67,"suggestions":"213"},"no-unused-vars","'CurrencyMultipleSearchSelection' is defined but never used.","Identifier","unusedVar","'CurrencySearchSelection' is defined but never used.","no-native-reassign",["214"],"no-negated-in-lhs",["215"],"'useState' is defined but never used.",["214"],["215"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setWidthRatio' is assigned a value but never used.","'setRadius' is assigned a value but never used.","'setEdgeOffsetRatio' is assigned a value but never used.","'setStartAngle' is assigned a value but never used.","'setNumSides' is assigned a value but never used.","'setCenterAng' is assigned a value but never used.","'setEdgeOffsetLen' is assigned a value but never used.","'setEdges' is assigned a value but never used.","'setGeneratedPoints' is assigned a value but never used.","'setPolygonCoordinates' is assigned a value but never used.","'setXDim' is assigned a value but never used.","'setYDim' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'centerAng', 'edgeOffsetLen', 'edges', 'numSides', 'radius', and 'startAngle'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPolygonCoordinatesInner' needs the current value of 'edges'.","ArrayExpression",["216"],"'setTextWithFontSize' is assigned a value but never used.","'setColor' is assigned a value but never used.","'setInnerPolygonFullnessRatio' is assigned a value but never used.","'startAngle' is assigned a value but never used.","'numSides' is assigned a value but never used.","'centerAng' is assigned a value but never used.","'generatedPoints' is assigned a value but never used.","'edgeOffsetLen' is assigned a value but never used.","'edges' is assigned a value but never used.","'innerPolygonRatio' is assigned a value but never used.",["214"],["215"],"'TestComptForRegularConvexPolygon' is defined but never used.","'setPolygonCountLength' is assigned a value but never used.","'setPolygonCountHeight' is assigned a value but never used.","'setAxialArray' is assigned a value but never used.","'setAxialMap' is assigned a value but never used.","'polygonCountHeight' is assigned a value but never used.","'axios' is defined but never used.","'getRadialExpansionLimit' is defined but never used.","'setDefaultUnitPolygon' is assigned a value but never used.","'setCustomizedPolygons' is assigned a value but never used.","'setOrientationX' is assigned a value but never used.","'setOrientationY' is assigned a value but never used.","'setFloatNumFault' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'axialMap', 'defaultUnitPolygon.fillColor', 'defaultUnitPolygon.innerFillColor', 'defaultUnitPolygon.innerPolygonRatio', 'defaultUnitPolygon.strokeColor', 'floatNumFault', 'orientationX', and 'orientationY'. Either include them or remove the dependency array.",["217"],"'defaultUnitPolygon' is assigned a value but never used.","'Dropdown' is defined but never used.","'setCurrencyDisplayType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currencyDisplayType'. Either include it or remove the dependency array.",["218"],"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},"Update the dependencies array to be: [centerAng, edgeOffsetLen, edges, numSides, props, radius, startAngle]",{"range":"225","text":"226"},"Update the dependencies array to be: [axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, floatNumFault, orientationX, orientationY, props]",{"range":"227","text":"228"},"Update the dependencies array to be: [props, currencyDisplaySource, currencyDisplayDestinations, currencyDisplayType]",{"range":"229","text":"230"},[2982,2989],"[centerAng, edgeOffsetLen, edges, numSides, props, radius, startAngle]",[5878,5885],"[axialMap, defaultUnitPolygon.fillColor, defaultUnitPolygon.innerFillColor, defaultUnitPolygon.innerPolygonRatio, defaultUnitPolygon.strokeColor, floatNumFault, orientationX, orientationY, props]",[4156,4215],"[props, currencyDisplaySource, currencyDisplayDestinations, currencyDisplayType]"]